---- CSCompiler.Add
Lambda(
    Add(x, y)
)
---- CSCompiler.AndAlso
Lambda(
    AndAlso(b1, b2)
)
---- CSCompiler.AndBitwise
Lambda(
    And(i, j)
)
---- CSCompiler.AndLogical
Lambda(
    And(b1, b2)
)
---- CSCompiler.AnonymousType
Lambda(
    New(
        typeof({ string Bar, string Baz }).GetConstructor(),
        Constant("abcd"),
        Constant("efgh")
    )
)
---- CSCompiler.AnonymousTypeFromVariables
Lambda(
    New(
        typeof({ string Bar, string Baz }).GetConstructor(),
        Bar, Baz
    )
)
---- CSCompiler.ArrayIndex
Lambda(
    ArrayIndex(arr,
        Constant(0)
    )
)
---- CSCompiler.ArrayLength
Lambda(
    ArrayLength(arr)
)
---- CSCompiler.ArrayMultipleIndex
Lambda(
    ArrayIndex(arr,
        Constant(5),
        Constant(6)
    )
)
---- CSCompiler.ArrayOfMultidimensionalArray
Lambda(
    NewArrayBounds(
        typeof(string[,]),
        Constant(5)
    )
)
---- CSCompiler.ArraySingleIndex
Lambda(
    ArrayIndex(arr,
        Constant(5)
    )
)
---- CSCompiler.BitwiseNot
Lambda(
    Not(i)
)
---- CSCompiler.ClosedVariable
Lambda(s)
---- CSCompiler.Coalesce
Lambda(
    Coalesce(s1, s2)
)
---- CSCompiler.CollectionTypeWithInitializer
Lambda(
    ListInit(
        New(
            typeof(List<string>).GetConstructor()
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("abcd")
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("efgh")
        )
    )
)
---- CSCompiler.CollectionTypeWithMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor()
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- CSCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor()
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("ef")
        )
    )
)
---- CSCompiler.Conditional
Lambda(
    Condition(
        GreaterThan(i,
            Constant(10)
        ),
        i,
        Add(i,
            Constant(10)
        )
    ),
    var i = Parameter(
        typeof(int),
        "i"
    )
)
---- CSCompiler.Convert
Lambda(
    Convert(lst,
        typeof(object)
    )
)
---- CSCompiler.DefaultRefType
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- CSCompiler.DefaultValueType
Lambda(
    Constant(0)
)
---- CSCompiler.Divide
Lambda(
    Divide(x, y)
)
---- CSCompiler.Equal
Lambda(
    Equal(i, j)
)
---- CSCompiler.ExclusiveOrBitwise
Lambda(
    ExclusiveOr(i, j)
)
---- CSCompiler.ExclusiveOrLogical
Lambda(
    ExclusiveOr(b1, b2)
)
---- CSCompiler.ExtensionMethod0Arguments
Lambda(
    Call(
        typeof(Enumerable).GetMethod("Count"),
        lst
    )
)
---- CSCompiler.ExtensionMethod1Argument
Lambda(
    Call(
        typeof(Enumerable).GetMethod("Take"),
        lst,
        Constant(1)
    )
)
---- CSCompiler.ExtensionMethod2Arguments
Lambda(
    Call(
        typeof(Enumerable).GetMethod("OrderBy"),
        lst,
        Lambda(x,
            var x = Parameter(
                typeof(string),
                "x"
            )
        ),
        MakeMemberAccess(null,
            typeof(StringComparer).GetProperty("OrdinalIgnoreCase")
        )
    )
)
---- CSCompiler.False
Lambda(
    Constant(false)
)
---- CSCompiler.GreaterThan
Lambda(
    GreaterThan(i, j)
)
---- CSCompiler.GreaterThanOrEqual
Lambda(
    GreaterThanOrEqual(i, j)
)
---- CSCompiler.InstanceMember
Lambda(
    MakeMemberAccess(s,
        typeof(string).GetProperty("Length")
    )
)
---- CSCompiler.InstanceMethod0Arguments
Lambda(
    Call(s,
        typeof(object).GetMethod("ToString")
    )
)
---- CSCompiler.InstanceMethod1Argument
Lambda(
    Call(s,
        typeof(string).GetMethod("CompareTo"),
        Constant("")
    )
)
---- CSCompiler.InstanceMethod2Arguments
Lambda(
    Call(s,
        typeof(string).GetMethod("IndexOf"),
        Constant('a'),
        Constant(2)
    )
)
---- CSCompiler.Integer
Lambda(
    Constant(5)
)
---- CSCompiler.InterpolatedString
Lambda(
    Call(
        typeof(string).GetMethod("Format"),
        Constant("{0:yyyy-MM-dd}"),
        Convert(
            New(
                typeof(DateTime).GetConstructor(),
                Constant(2001),
                Constant(3),
                Constant(25)
            ),
            typeof(object)
        )
    )
)
---- CSCompiler.InvocationNoArguments
Lambda(
    Invoke(del)
)
---- CSCompiler.InvocationOneArgument
Lambda(
    Invoke(del,
        Constant(5)
    )
)
---- CSCompiler.JaggedWithBounds
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(5)
    )
)
---- CSCompiler.JaggedWithElementsExplicitType
Lambda(
    NewArrayInit(
        typeof(object[]),
        NewArrayInit(
            typeof(string),
            Constant("ab"),
            Constant("cd")
        ),
        NewArrayInit(
            typeof(string),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- CSCompiler.JaggedWithElementsImplicitType
Lambda(
    NewArrayInit(
        typeof(string[]),
        NewArrayInit(
            typeof(string),
            Constant("ab"),
            Constant("cd")
        ),
        NewArrayInit(
            typeof(string),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- CSCompiler.LeftShift
Lambda(
    LeftShift(i, j)
)
---- CSCompiler.LessThan
Lambda(
    LessThan(i, j)
)
---- CSCompiler.LessThanOrEqual
Lambda(
    LessThanOrEqual(i, j)
)
---- CSCompiler.ListBinding
Lambda(
    MemberInit(
        New(
            typeof(Node).GetConstructor()
        ),
        ListBind(
            typeof(Node).GetProperty("Children"),
            ElementInit(
                typeof(ICollection<Node>).GetMethod("Add"),
                New(
                    typeof(Node).GetConstructor()
                )
            ),
            ElementInit(
                typeof(ICollection<Node>).GetMethod("Add"),
                New(
                    typeof(Node).GetConstructor()
                )
            )
        )
    )
)
---- CSCompiler.LogicalNot
Lambda(
    Not(b)
)
---- CSCompiler.MathPow
Lambda(
    Call(
        typeof(Math).GetMethod("Pow"),
        x, y
    ),
    var x = Parameter(
        typeof(double),
        "x"
    ),
    var y = Parameter(
        typeof(double),
        "y"
    )
)
---- CSCompiler.MemberMemberBinding
Lambda(
    MemberInit(
        New(
            typeof(Node).GetConstructor()
        ),
        MemberBind(
            typeof(Node).GetProperty("Data"),
            Bind(
                typeof(NodeData).GetProperty("Name"),
                Constant("abcd")
            )
        )
    )
)
---- CSCompiler.Modulo
Lambda(
    Modulo(x, y)
)
---- CSCompiler.MultidimensionalArrayOfArray
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(3),
        Constant(2)
    )
)
---- CSCompiler.MultidimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(2),
        Constant(3)
    )
)
---- CSCompiler.Multiply
Lambda(
    Multiply(x, y)
)
---- CSCompiler.NamedType
Lambda(
    New(
        typeof(Random).GetConstructor()
    )
)
---- CSCompiler.NamedTypeConstructorParameters
Lambda(
    New(
        typeof(Foo).GetConstructor(),
        Constant("ijkl")
    )
)
---- CSCompiler.NamedTypeConstructorParametersWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(),
            Constant("ijkl")
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz"),
            Constant("efgh")
        )
    )
)
---- CSCompiler.NamedTypeWithInitializer
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor()
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        )
    )
)
---- CSCompiler.NamedTypeWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor()
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz"),
            Constant("efgh")
        )
    )
)
---- CSCompiler.Negate
Lambda(
    Negate(i)
)
---- CSCompiler.NonInteger
Lambda(
    Constant(7.32)
)
---- CSCompiler.NoParametersNonVoidReturn
Lambda(
    Constant("abcd")
)
---- CSCompiler.NoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine")
    )
)
---- CSCompiler.NotEqual
Lambda(
    NotEqual(i, j)
)
---- CSCompiler.Nothing
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- CSCompiler.OneParameterNonVoidReturn
Lambda(s,
    var s = Parameter(
        typeof(string),
        "s"
    )
)
---- CSCompiler.OneParameterVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        s
    ),
    var s = Parameter(
        typeof(string),
        "s"
    )
)
---- CSCompiler.OrBitwise
Lambda(
    Or(i, j)
)
---- CSCompiler.OrElse
Lambda(
    OrElse(b1, b2)
)
---- CSCompiler.OrLogical
Lambda(
    Or(b1, b2)
)
---- CSCompiler.RightShift
Lambda(
    RightShift(i, j)
)
---- CSCompiler.SingleDimensionInit
Lambda(
    NewArrayInit(
        typeof(string),
        Constant("")
    )
)
---- CSCompiler.SingleDimensionInitExplicitType
Lambda(
    NewArrayInit(
        typeof(object),
        Constant("")
    )
)
---- CSCompiler.SingleDimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(5)
    )
)
---- CSCompiler.StaticMember
Lambda(
    MakeMemberAccess(null,
        typeof(string).GetField("Empty")
    )
)
---- CSCompiler.StaticMethod0Arguments
Lambda(
    Call(
        typeof(Dummy).GetMethod("DummyMethod")
    )
)
---- CSCompiler.StaticMethod1Argument
Lambda(
    Call(
        typeof(string).GetMethod("Intern"),
        Constant("")
    )
)
---- CSCompiler.StaticMethod2Arguments
Lambda(
    Call(
        typeof(string).GetMethod("Join"),
        Constant(","),
        NewArrayInit(
            typeof(string),
            Constant("a"),
            Constant("b")
        )
    )
)
---- CSCompiler.String
Lambda(
    Constant("abcd")
)
---- CSCompiler.StringConcat
Lambda(
    Call(
        typeof(string).GetMethod("Concat"),
        s1, s2
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- CSCompiler.Subtract
Lambda(
    Subtract(x, y)
)
---- CSCompiler.True
Lambda(
    Constant(true)
)
---- CSCompiler.TwoParametersNonVoidReturn
Lambda(
    Add(s1, s2),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- CSCompiler.TwoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Add(s1, s2)
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- CSCompiler.Type
Lambda(
    Constant(
        typeof(string),
        typeof(Type)
    )
)
---- CSCompiler.TypeAs
Lambda(
    TypeAs(o,
        typeof(string)
    )
)
---- CSCompiler.TypeCheck
Lambda(
    TypeIs(o,
        typeof(string)
    )
)
---- CSCompiler.TypeIndexer
Lambda(
    Property(lst,
        typeof(List<string>).GetProperty("Item"),
        Constant(3)
    )
)
---- FactoryMethods.Array
Constant(new[] { "abcd", 5, #Random })
---- FactoryMethods.ArrayOfMultidimensionalArray
NewArrayBounds(
    typeof(string[,]),
    Constant(5)
)
---- FactoryMethods.BlockMultipleVariable
Block(new[] { i, s1 },
    Constant(true),
    Constant(true)
)
---- FactoryMethods.BlockNoVariables
Block(
    Constant(true),
    Constant(true)
)
---- FactoryMethods.BlockSingleVariable
Block(new[] { i },
    Constant(true),
    Constant(true)
)
---- FactoryMethods.CollectionTypeWithInitializer
ListInit(
    New(
        typeof(List<string>).GetConstructor()
    ),
    ElementInit(
        typeof(List<string>).GetMethod("Add"),
        Constant("abcd")
    ),
    ElementInit(
        typeof(List<string>).GetMethod("Add"),
        Constant("efgh")
    )
)
---- FactoryMethods.CollectionTypeWithMultiElementInitializers
ListInit(
    New(
        typeof(Wrapper).GetConstructor()
    ),
    ElementInit(
        typeof(Wrapper).GetMethod("Add"),
        Constant("ab"),
        Constant("cd")
    ),
    ElementInit(
        typeof(Wrapper).GetMethod("Add"),
        Constant("ef"),
        Constant("gh")
    )
)
---- FactoryMethods.CollectionTypeWithSingleOrMultiElementInitializers
ListInit(
    New(
        typeof(Wrapper).GetConstructor()
    ),
    ElementInit(
        typeof(Wrapper).GetMethod("Add"),
        Constant("ab"),
        Constant("cd")
    ),
    ElementInit(
        typeof(List<string>).GetMethod("Add"),
        Constant("ef")
    )
)
---- FactoryMethods.ConstructAdd
Add(x, y)
---- FactoryMethods.ConstructAddAssign
AddAssign(i, j)
---- FactoryMethods.ConstructAddAssignChecked
AddAssignChecked(i, j)
---- FactoryMethods.ConstructAddChecked
AddChecked(x, y)
---- FactoryMethods.ConstructAndAlso
AndAlso(b1, b2)
---- FactoryMethods.ConstructAndAssign
AndAssign(b1, b2)
---- FactoryMethods.ConstructAndBitwise
And(i, j)
---- FactoryMethods.ConstructAndLogical
And(b1, b2)
---- FactoryMethods.ConstructArrayIndex
ArrayIndex(arr, i)
---- FactoryMethods.ConstructArrayLength
ArrayLength(arr)
---- FactoryMethods.ConstructAssign
Assign(x,
    Constant(5.2)
)
---- FactoryMethods.ConstructBitwiseNot
Not(i)
---- FactoryMethods.ConstructCatchMultiStatement
Catch(ex,
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    )
)
---- FactoryMethods.ConstructCatchMultiStatementWithFilter
Catch(ex,
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    ),
    Constant(true)
)
---- FactoryMethods.ConstructCatchMultiStatementWithType
Catch(
    typeof(InvalidCastException),
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    )
)
---- FactoryMethods.ConstructCatchSingleStatement
Catch(ex,
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.ConstructCatchSingleStatementWithFilter
Catch(ex,
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.ConstructCatchSingleStatementWithType
Catch(
    typeof(InvalidCastException),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.ConstructCatchWithMultiStatementFilter
Catch(ex,
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Block(
        Constant(true),
        Constant(true)
    )
)
---- FactoryMethods.ConstructCoalesce
Coalesce(s1, s2)
---- FactoryMethods.ConstructConvert
Convert(arr,
    typeof(object)
)
---- FactoryMethods.ConstructConvertChecked
ConvertChecked(
    Constant(5),
    typeof(float)
)
---- FactoryMethods.ConstructConvertCheckedForReferenceType
Convert(arr,
    typeof(object)
)
---- FactoryMethods.ConstructDecrement
Decrement(i)
---- FactoryMethods.ConstructDivide
Divide(x, y)
---- FactoryMethods.ConstructDivideAssign
DivideAssign(i, j)
---- FactoryMethods.ConstructEmptyLabelTarget
Label("")
---- FactoryMethods.ConstructEqual
Equal(x, y)
---- FactoryMethods.ConstructExclusiveOrAssign
ExclusiveOrAssign(b1, b2)
---- FactoryMethods.ConstructExclusiveOrBitwise
ExclusiveOr(i, j)
---- FactoryMethods.ConstructExclusiveOrLogical
ExclusiveOr(b1, b2)
---- FactoryMethods.ConstructGetIndex
Dynamic(
    #CSharpGetIndexBinder,
    typeof(object), new[] {
        obj,
        Constant("key")
    }
)
---- FactoryMethods.ConstructGetIndexMultipleKeys
Dynamic(
    #CSharpGetIndexBinder,
    typeof(object), new[] {
        obj,
        Constant("key"),
        Constant(1)
    }
)
---- FactoryMethods.ConstructGetMember
Dynamic(
    #CSharpGetMemberBinder,
    typeof(object), new[] { obj }
)
---- FactoryMethods.ConstructGreaterThan
GreaterThan(x, y)
---- FactoryMethods.ConstructGreaterThanOrEqual
GreaterThanOrEqual(x, y)
---- FactoryMethods.ConstructIncrement
Increment(i)
---- FactoryMethods.ConstructInvocationNoArguments
Dynamic(
    #CSharpInvokeBinder,
    typeof(object), new[] { obj }
)
---- FactoryMethods.ConstructInvocationWithArguments
Dynamic(
    #CSharpInvokeBinder,
    typeof(object), new[] {
        obj,
        Constant("arg1"),
        Constant(15)
    }
)
---- FactoryMethods.ConstructIsFalse
IsFalse(b1)
---- FactoryMethods.ConstructIsTrue
IsTrue(b1)
---- FactoryMethods.ConstructLabel
Block(new[] { i },
    Block(new[] { j },
        Constant(true),
        Label(
            Label("target"),
            null
        ),
        Constant(true)
    )
)
---- FactoryMethods.ConstructLabel1
Block(new[] { i },
    Block(new[] { j },
        Label(
            Label("target"),
            null
        ),
        Constant(true)
    )
)
---- FactoryMethods.ConstructLabelTarget
Label("target")
---- FactoryMethods.ConstructLeftShift
LeftShift(i, j)
---- FactoryMethods.ConstructLeftShiftAssign
LeftShiftAssign(i, j)
---- FactoryMethods.ConstructLessThan
LessThan(x, y)
---- FactoryMethods.ConstructLessThanOrEqual
LessThanOrEqual(x, y)
---- FactoryMethods.ConstructLogicalNot
Not(b1)
---- FactoryMethods.ConstructMemberInvocationNoArguments
Dynamic(
    #CSharpInvokeMemberBinder,
    typeof(object), new[] { obj }
)
---- FactoryMethods.ConstructMemberInvocationWithArguments
Dynamic(
    #CSharpInvokeMemberBinder,
    typeof(object), new[] {
        obj,
        Constant("arg1"),
        Constant(15)
    }
)
---- FactoryMethods.ConstructModulo
Modulo(x, y)
---- FactoryMethods.ConstructModuloAssign
ModuloAssign(i, j)
---- FactoryMethods.ConstructMultiply
Multiply(x, y)
---- FactoryMethods.ConstructMultiplyAssign
MultiplyAssign(i, j)
---- FactoryMethods.ConstructMultiplyAssignChecked
MultiplyAssignChecked(i, j)
---- FactoryMethods.ConstructMultiplyChecked
MultiplyChecked(x, y)
---- FactoryMethods.ConstructNegate
Negate(i)
---- FactoryMethods.ConstructNotEqual
NotEqual(x, y)
---- FactoryMethods.ConstructOrAssign
OrAssign(b1, b2)
---- FactoryMethods.ConstructOrBitwise
Or(i, j)
---- FactoryMethods.ConstructOrElse
OrElse(b1, b2)
---- FactoryMethods.ConstructOrLogical
Or(b1, b2)
---- FactoryMethods.ConstructPostDecrementAssign
PostDecrementAssign(i)
---- FactoryMethods.ConstructPostIncrementAssign
PostIncrementAssign(i)
---- FactoryMethods.ConstructPower
Power(x, y)
---- FactoryMethods.ConstructPowerAssign
PowerAssign(x, y)
---- FactoryMethods.ConstructPreDecrementAssign
PreDecrementAssign(i)
---- FactoryMethods.ConstructPreIncrementAssign
PreIncrementAssign(i)
---- FactoryMethods.ConstructReferenceEqual
Equal(lstString, lstString)
---- FactoryMethods.ConstructReferenceNotEqual
NotEqual(lstString, lstString)
---- FactoryMethods.ConstructRethrow
Throw(null)
---- FactoryMethods.ConstructRightShift
RightShift(i, j)
---- FactoryMethods.ConstructRightShiftAssign
RightShiftAssign(i, j)
---- FactoryMethods.ConstructRuntimeVariables
RuntimeVariables(x, s1)
---- FactoryMethods.ConstructSetIndex
Dynamic(
    #CSharpSetIndexBinder,
    typeof(object), new[] {
        obj,
        Constant(42),
        Constant("key")
    }
)
---- FactoryMethods.ConstructSetIndexMultipleKeys
Dynamic(
    #CSharpSetIndexBinder,
    typeof(object), new[] {
        obj,
        Constant(42),
        Constant("key"),
        Constant(1)
    }
)
---- FactoryMethods.ConstructSetMember
Dynamic(
    #CSharpSetMemberBinder,
    typeof(object), new[] {
        obj,
        Constant(42)
    }
)
---- FactoryMethods.ConstructSimpleCatch
Catch(
    typeof(Exception),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.ConstructSubtract
Subtract(x, y)
---- FactoryMethods.ConstructSubtractAssign
SubtractAssign(i, j)
---- FactoryMethods.ConstructSubtractAssignChecked
SubtractAssignChecked(i, j)
---- FactoryMethods.ConstructSubtractChecked
SubtractChecked(x, y)
---- FactoryMethods.ConstructThrow
Throw(
    Constant(#Random)
)
---- FactoryMethods.ConstructTryCatch
TryCatch(
    Constant(true),
    Catch(
        typeof(Exception),
        Constant(true)
    )
)
---- FactoryMethods.ConstructTryCatchFinally
TryCatchFinally(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Catch(ex,
        Constant(true)
    )
)
---- FactoryMethods.ConstructTryFault
TryFault(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.ConstructTryFinally
TryFinally(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.ConstructTypeAs
TypeAs(arr,
    typeof(object)
)
---- FactoryMethods.DifferentTypeForNodeAndValue
Constant(#List<string>,
    typeof(IEnumerable)
)
---- FactoryMethods.EmptyLoop
Loop(
    Constant(true)
)
---- FactoryMethods.EmptyLoop1
Loop(
    Block(
        Constant(true),
        Constant(true)
    )
)
---- FactoryMethods.ExtensionMethod0Arguments
Call(
    typeof(Enumerable).GetMethod("Count"),
    lstString
)
---- FactoryMethods.ExtensionMethod1Argument
Call(
    typeof(Enumerable).GetMethod("Take"),
    lstString,
    Constant(1)
)
---- FactoryMethods.ExtensionMethod2Arguments
Call(
    typeof(Enumerable).GetMethod("OrderBy"),
    lstString,
    Lambda(x,
        var x = Parameter(
            typeof(string),
            "x"
        )
    ),
    MakeMemberAccess(null,
        typeof(StringComparer).GetProperty("OrdinalIgnoreCase")
    )
)
---- FactoryMethods.InstanceIndexer
MakeIndex(lstString,
    typeof(List<string>).GetProperty("Item"),
    new[] {
        Constant(0)
    }
)
---- FactoryMethods.InstanceMember
MakeMemberAccess(
    Constant(""),
    typeof(string).GetProperty("Length")
)
---- FactoryMethods.InstanceMethod0Arguments
Call(s,
    typeof(object).GetMethod("ToString")
)
---- FactoryMethods.InstanceMethod1Argument
Call(s,
    typeof(string).GetMethod("CompareTo"),
    Constant("")
)
---- FactoryMethods.InstanceMethod2Arguments
Call(s,
    typeof(string).GetMethod("IndexOf"),
    Constant('a'),
    Constant(2)
)
---- FactoryMethods.JaggedWithBounds
NewArrayBounds(
    typeof(string[]),
    Constant(5)
)
---- FactoryMethods.JaggedWithElementsExplicitType
NewArrayInit(
    typeof(object[]),
    NewArrayInit(
        typeof(string),
        Constant("ab"),
        Constant("cd")
    ),
    NewArrayInit(
        typeof(string),
        Constant("ef"),
        Constant("gh")
    )
)
---- FactoryMethods.JaggedWithElementsImplicitType
NewArrayInit(
    typeof(string[]),
    NewArrayInit(
        typeof(string),
        Constant("ab"),
        Constant("cd")
    ),
    NewArrayInit(
        typeof(string),
        Constant("ef"),
        Constant("gh")
    )
)
---- FactoryMethods.LambdaMultilineBlockNonvoidReturn
Lambda(
    Block(
        Constant(true),
        Constant(true)
    )
)
---- FactoryMethods.LambdaMultilineNestedBlockNonvoidReturn
Lambda(
    Block(
        Constant(true),
        Block(new[] { s1, s2 },
            Constant(true),
            Constant(true)
        )
    )
)
---- FactoryMethods.MakeArrayAccess
ArrayAccess(arr,
    Constant(0)
)
---- FactoryMethods.MakeArrayIndex
ArrayIndex(arr,
    Constant(0)
)
---- FactoryMethods.MakeArrayMultipleIndex
ArrayIndex(arr2d,
    Constant(0),
    Constant(1)
)
---- FactoryMethods.MakeBreak
Break(
    Label("target")
)
---- FactoryMethods.MakeBreakWithValue
Break(
    Label("target"),
    Constant(5)
)
---- FactoryMethods.MakeByRefParameter
Lambda(
    Constant(true),
    var s4 = Parameter(
        typeof(string).MakeByRef(),
        "s4"
    )
)
---- FactoryMethods.MakeClearDebugInfo
ClearDebugInfo(#SymbolDocumentInfo)
---- FactoryMethods.MakeConditional
Condition(
    GreaterThan(i,
        Constant(10)
    ),
    i,
    Add(i,
        Constant(10)
    )
)
---- FactoryMethods.MakeContinue
Continue(
    Label("target")
)
---- FactoryMethods.MakeDebugInfo
DebugInfo(#SymbolDocumentInfo, 1, 2, 3, 4)
---- FactoryMethods.MakeDefaultRefType
Default(
    typeof(string)
)
---- FactoryMethods.MakeDefaultValueType
Default(
    typeof(int)
)
---- FactoryMethods.MakeElementInit
ElementInit(
    typeof(List<string>).GetMethod("Add"),
    Constant("abcd")
)
---- FactoryMethods.MakeElementInit2Arguments
ElementInit(
    typeof(Wrapper).GetMethod("Add"),
    Constant("abcd"),
    Constant("efgh")
)
---- FactoryMethods.MakeGotoWithoutValue
Goto(
    Label("target")
)
---- FactoryMethods.MakeGotoWithValue
Goto(
    Label("target"),
    Constant(5)
)
---- FactoryMethods.MakeInvocation
Invoke(
    Lambda(
        Constant(5)
    )
)
---- FactoryMethods.MakeListBinding
ListBind(
    typeof(Node).GetProperty("Children"),
    ElementInit(
        typeof(ICollection<Node>).GetMethod("Add"),
        New(
            typeof(Node).GetConstructor()
        )
    ),
    ElementInit(
        typeof(ICollection<Node>).GetMethod("Add"),
        New(
            typeof(Node).GetConstructor()
        )
    )
)
---- FactoryMethods.MakeMemberBind
Bind(
    typeof(DummyMember).GetProperty("Foo"),
    Constant("abcd")
)
---- FactoryMethods.MakeMemberMemberBind
MemberBind(
    typeof(Node).GetProperty("Data"),
    Bind(
        typeof(NodeData).GetProperty("Name"),
        Constant("abcd")
    )
)
---- FactoryMethods.MakeQuoted
Block(new[] { x },
    Quote(
        Lambda(
            Call(
                typeof(Console).GetMethod("WriteLine"),
                Constant(true)
            )
        )
    )
)
---- FactoryMethods.MakeQuoted1
Lambda(
    Quote(
        Lambda(
            Call(
                typeof(Console).GetMethod("WriteLine"),
                Constant(true)
            )
        )
    )
)
---- FactoryMethods.MakeReturn
Return(
    Label("target")
)
---- FactoryMethods.MakeReturnWithValue
Return(
    Label("target"),
    Constant(5)
)
---- FactoryMethods.MakeTypeCheck
TypeIs(
    Constant(""),
    typeof(string)
)
---- FactoryMethods.MakeTypeEqual
TypeEqual(
    Constant(""),
    typeof(IEnumerable)
)
---- FactoryMethods.MultidimensionalArrayOfArray
NewArrayBounds(
    typeof(string[]),
    Constant(3),
    Constant(2)
)
---- FactoryMethods.MultidimensionWithBounds
NewArrayBounds(
    typeof(string),
    Constant(2),
    Constant(3)
)
---- FactoryMethods.MultilineIfFalse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        )
    )
)
---- FactoryMethods.MultilineIfTrue
IfThen(
    Constant(true),
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    )
)
---- FactoryMethods.MultilineLambda
Lambda(
    IfThen(
        Constant(true),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    )
)
---- FactoryMethods.MultilineTestPart
Condition(
    Block(
        Constant(true),
        Constant(true)
    ),
    MakeMemberAccess(
        Constant("true"),
        typeof(string).GetProperty("Length")
    ),
    MakeMemberAccess(
        Constant("false"),
        typeof(string).GetProperty("Length")
    )
)
---- FactoryMethods.MultilineTestPart1
IfThen(
    Block(
        Constant(true),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.MultiValueSwitchCase
SwitchCase(
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    ),
    Constant(5),
    Constant(6)
)
---- FactoryMethods.MultiValueSwitchCase1
SwitchCase(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Constant(5),
    Constant(6)
)
---- FactoryMethods.NamedLambda
Lambda(
    Add(s1, s2),
    "name", new[] {
        var s1 = Parameter(
            typeof(string),
            "s1"
        ),
        var s2 = Parameter(
            typeof(string),
            "s2"
        )
    }
)
---- FactoryMethods.NamedType
New(
    typeof(Random).GetConstructor()
)
---- FactoryMethods.NamedTypeConstructorParameters
New(
    typeof(Foo).GetConstructor(),
    Constant("ijkl")
)
---- FactoryMethods.NamedTypeConstructorParametersWithInitializers
MemberInit(
    New(
        typeof(Foo).GetConstructor(),
        Constant("ijkl")
    ),
    Bind(
        typeof(Foo).GetProperty("Bar"),
        Constant("abcd")
    ),
    Bind(
        typeof(Foo).GetProperty("Baz"),
        Constant("efgh")
    )
)
---- FactoryMethods.NamedTypeWithInitializer
MemberInit(
    New(
        typeof(Foo).GetConstructor()
    ),
    Bind(
        typeof(Foo).GetProperty("Bar"),
        Constant("abcd")
    )
)
---- FactoryMethods.NamedTypeWithInitializers
MemberInit(
    New(
        typeof(Foo).GetConstructor()
    ),
    Bind(
        typeof(Foo).GetProperty("Bar"),
        Constant("abcd")
    ),
    Bind(
        typeof(Foo).GetProperty("Baz"),
        Constant("efgh")
    )
)
---- FactoryMethods.NestedBlockInBlockSyntax
IfThen(
    Constant(true),
    Block(
        Constant(true),
        Block(
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    )
)
---- FactoryMethods.NestedBlockInBlockSyntaxWithVariable
IfThen(
    Constant(true),
    Block(
        Constant(true),
        Block(new[] { s1 },
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    )
)
---- FactoryMethods.NestedBlockInTest
IfThen(
    Block(
        Constant(true),
        Block(
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedBlockInTestWithVariables
IfThen(
    Block(
        Constant(true),
        Block(new[] { s1 },
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedElse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    IfThen(
        Constant(true),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    )
)
---- FactoryMethods.NestedIfThen
IfThen(
    Constant(true),
    IfThen(
        Constant(true),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    )
)
---- FactoryMethods.NestedInlineBlock
Block(
    Constant(true),
    Block(
        Constant(true),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedInlineBlockWithVariable
Block(
    Constant(true),
    Block(new[] { s1 },
        Constant(true),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedLambda
Lambda(
    Lambda(
        Add(s1, s2),
        var s1 = Parameter(
            typeof(string),
            "s1"
        ),
        var s2 = Parameter(
            typeof(string),
            "s2"
        )
    )
)
---- FactoryMethods.NonVoidConditionalWithElse
Condition(
    Constant(true),
    MakeMemberAccess(
        Constant("true"),
        typeof(string).GetProperty("Length")
    ),
    MakeMemberAccess(
        Constant("false"),
        typeof(string).GetProperty("Length")
    )
)
---- FactoryMethods.NonVoidConditionalWithoutElse
Condition(
    Constant(true),
    MakeMemberAccess(
        Constant("true"),
        typeof(string).GetProperty("Length")
    ),
    Default(
        typeof(int)
    )
)
---- FactoryMethods.NoParametersNonVoidReturn
Lambda(
    Constant("abcd")
)
---- FactoryMethods.NoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine")
    )
)
---- FactoryMethods.OldTuple
Constant(Tuple.Create("abcd", 5))
---- FactoryMethods.OneParameterNonVoidReturn
Lambda(s,
    var s = Parameter(
        typeof(string),
        "s"
    )
)
---- FactoryMethods.OneParameterVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        s
    ),
    var s = Parameter(
        typeof(string),
        "s"
    )
)
---- FactoryMethods.PropertyIndexer
MakeIndex(lstString,
    typeof(List<string>).GetProperty("Item"),
    new[] {
        Constant(0)
    }
)
---- FactoryMethods.Random
Constant(#Random)
---- FactoryMethods.RuntimeVariablesWithinBlock
Block(new[] { s2 },
    Constant(true),
    RuntimeVariables(x, s1)
)
---- FactoryMethods.SingleDimensionInit
NewArrayInit(
    typeof(string),
    Constant("")
)
---- FactoryMethods.SingleDimensionInitExplicitType
NewArrayInit(
    typeof(object),
    Constant("")
)
---- FactoryMethods.SingleDimensionWithBounds
NewArrayBounds(
    typeof(string),
    Constant(5)
)
---- FactoryMethods.SingleValueSwitchCase
SwitchCase(
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        )
    ),
    Constant(5)
)
---- FactoryMethods.SingleValueSwitchCase1
SwitchCase(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Constant(5)
)
---- FactoryMethods.StaticMember
MakeMemberAccess(null,
    typeof(string).GetField("Empty")
)
---- FactoryMethods.StaticMethod0Arguments
Call(
    typeof(Dummy).GetMethod("DummyMethod")
)
---- FactoryMethods.StaticMethod1Argument
Call(
    typeof(string).GetMethod("Intern"),
    Constant("")
)
---- FactoryMethods.StaticMethod2Arguments
Call(
    typeof(string).GetMethod("Join"),
    Constant(","),
    NewArrayInit(
        typeof(string),
        Constant("a"),
        Constant("b")
    )
)
---- FactoryMethods.StringConcat
Call(
    typeof(string).GetMethod("Concat"),
    s1, s2
)
---- FactoryMethods.SwitchOnExpressionWithDefaultMultiStatement
Switch(i,
    Block(
        typeof(void),
        Constant(true),
        Constant(true)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnExpressionWithDefaultSingleStatement
Switch(i,
    Empty(),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnExpressionWithoutDefault
Switch(i,
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnMultipleStatementsWithDefault
Switch(
    Block(i, j),
    Block(
        typeof(void),
        Constant(true),
        Constant(true)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnMultipleStatementsWithoutDefault
Switch(
    Block(i, j),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine"),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.TwoParametersNonVoidReturn
Lambda(
    Add(s1, s2),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- FactoryMethods.TwoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Add(s1, s2)
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- FactoryMethods.Type
Constant(
    typeof(string)
)
---- FactoryMethods.ValueTuple
Constant(("abcd", 5))
---- FactoryMethods.VoidConditional1WithElse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(false)
    )
)
---- FactoryMethods.VoidConditional1WithoutElse
IfThen(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- FactoryMethods.VoidConditionalWithElse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(false)
    )
)
---- FactoryMethods.VoidConditionalWithoutElse
IfThen(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Constant(true)
    )
)
---- VBCompiler.Add
Lambda(
    Add(x, y)
)
---- VBCompiler.AndAlso
Lambda(
    AndAlso(b1, b2)
)
---- VBCompiler.AndBitwise
Lambda(
    And(i, j)
)
---- VBCompiler.AndLogical
Lambda(
    And(b1, b2)
)
---- VBCompiler.AnonymousType
Lambda(
    New(
        typeof({ string Bar, string Baz }).GetConstructor(),
        Constant("abcd"),
        Constant("efgh")
    )
)
---- VBCompiler.AnonymousTypeFromVariables
Lambda(
    New(
        typeof({ string Bar, string Baz }).GetConstructor(),
        Bar, Baz
    )
)
---- VBCompiler.ArrayIndex
Lambda(
    ArrayIndex(arr,
        Constant(0)
    )
)
---- VBCompiler.ArrayLength
Lambda(
    ArrayLength(arr)
)
---- VBCompiler.ArrayMultipleIndex
Lambda(
    ArrayIndex(arr,
        Constant(5),
        Constant(6)
    )
)
---- VBCompiler.ArrayOfMultidimensionalArray
Lambda(
    NewArrayBounds(
        typeof(string[,]),
        Constant(5)
    )
)
---- VBCompiler.ArraySingleIndex
Lambda(
    ArrayIndex(arr,
        Constant(5)
    )
)
---- VBCompiler.BitwiseNot
Lambda(
    Not(i)
)
---- VBCompiler.ClosedVariable
Lambda(s)
---- VBCompiler.Coalesce
Lambda(
    Coalesce(s1, s2)
)
---- VBCompiler.CObject
Lambda(
    Convert(lst,
        typeof(object)
    )
)
---- VBCompiler.CollectionTypeWithInitializer
Lambda(
    ListInit(
        New(
            typeof(List<string>).GetConstructor()
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("abcd")
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("efgh")
        )
    )
)
---- VBCompiler.CollectionTypeWithMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor()
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- VBCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor()
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add"),
            Constant("ef")
        )
    )
)
---- VBCompiler.Conditional
Lambda(
    Condition(
        GreaterThan(i,
            Constant(10)
        ),
        i,
        AddChecked(i,
            Constant(10)
        )
    ),
    var i = Parameter(
        typeof(int),
        "i"
    )
)
---- VBCompiler.ConstantNothingToObject
Lambda(
    Constant(null)
)
---- VBCompiler.ConstantNothingToReferenceType
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- VBCompiler.ConstantNothingToValueType
Lambda(
    Constant(0)
)
---- VBCompiler.Convert
Lambda(
    Convert(o,
        typeof(Random)
    )
)
---- VBCompiler.Divide
Lambda(
    Divide(x, y)
)
---- VBCompiler.Equal
Lambda(
    Equal(i, j)
)
---- VBCompiler.EscapedString
Lambda(
    Constant("\"")
)
---- VBCompiler.ExclusiveOrBitwise
Lambda(
    ExclusiveOr(i, j)
)
---- VBCompiler.ExclusiveOrLogical
Lambda(
    ExclusiveOr(b1, b2)
)
---- VBCompiler.ExtensionMethod0Arguments
Lambda(
    Call(
        typeof(Enumerable).GetMethod("Distinct"),
        Convert(lst,
            typeof(IEnumerable<string>)
        )
    )
)
---- VBCompiler.ExtensionMethod0ArgumentsWithoutConversion
Lambda(
    Call(
        typeof(Enumerable).GetMethod("Distinct"),
        lst
    )
)
---- VBCompiler.ExtensionMethod1Argument
Lambda(
    Call(
        typeof(Enumerable).GetMethod("Take"),
        Convert(lst,
            typeof(IEnumerable<string>)
        ),
        Constant(1)
    )
)
---- VBCompiler.ExtensionMethod1ArgumentWithoutConversion
Lambda(
    Call(
        typeof(Enumerable).GetMethod("Take"),
        lst,
        Constant(1)
    )
)
---- VBCompiler.ExtensionMethod2Arguments
Lambda(
    Call(
        typeof(Enumerable).GetMethod("OrderBy"),
        Convert(lst,
            typeof(IEnumerable<string>)
        ),
        Lambda(x,
            var x = Parameter(
                typeof(string),
                "x"
            )
        ),
        Convert(
            MakeMemberAccess(null,
                typeof(StringComparer).GetProperty("OrdinalIgnoreCase")
            ),
            typeof(IComparer<string>)
        )
    )
)
---- VBCompiler.ExtensionMethod2ArgumentsWithoutConversion
Lambda(
    Call(
        typeof(Enumerable).GetMethod("OrderBy"),
        lst,
        Lambda(x,
            var x = Parameter(
                typeof(string),
                "x"
            )
        ),
        comparer
    )
)
---- VBCompiler.False
Lambda(
    Constant(false)
)
---- VBCompiler.GreaterThan
Lambda(
    GreaterThan(i, j)
)
---- VBCompiler.GreaterThanOrEqual
Lambda(
    GreaterThanOrEqual(i, j)
)
---- VBCompiler.InstanceMember
Lambda(
    MakeMemberAccess(s,
        typeof(string).GetProperty("Length")
    )
)
---- VBCompiler.InstanceMethod0Arguments
Lambda(
    Call(s,
        typeof(string).GetMethod("ToString")
    )
)
---- VBCompiler.InstanceMethod1Argument
Lambda(
    Call(s,
        typeof(string).GetMethod("CompareTo"),
        Constant("")
    )
)
---- VBCompiler.InstanceMethod2Arguments
Lambda(
    Call(s,
        typeof(string).GetMethod("IndexOf"),
        Constant('a'),
        Constant(2)
    )
)
---- VBCompiler.Integer
Lambda(
    Constant(5)
)
---- VBCompiler.InterpolatedString
Lambda(
    Call(
        typeof(string).GetMethod("Format"),
        Constant("{0:yyyy-MM-dd}"),
        Convert(
            Constant(#DateTime),
            typeof(object)
        )
    )
)
---- VBCompiler.InvocationNoArguments
Lambda(
    Invoke(del)
)
---- VBCompiler.InvocationOneArgument
Lambda(
    Invoke(del,
        Constant(5)
    )
)
---- VBCompiler.JaggedWithBounds
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(5)
    )
)
---- VBCompiler.JaggedWithElementsExplicitType
Lambda(
    NewArrayInit(
        typeof(object[]),
        Convert(
            NewArrayInit(
                typeof(string),
                Constant("ab"),
                Constant("cd")
            ),
            typeof(object[])
        ),
        Convert(
            NewArrayInit(
                typeof(string),
                Constant("ef"),
                Constant("gh")
            ),
            typeof(object[])
        )
    )
)
---- VBCompiler.JaggedWithElementsImplicitType
Lambda(
    NewArrayInit(
        typeof(string[]),
        NewArrayInit(
            typeof(string),
            Constant("ab"),
            Constant("cd")
        ),
        NewArrayInit(
            typeof(string),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- VBCompiler.JaggedWithElementsImplicitTypeInnerNonLiteral
Lambda(
    NewArrayInit(
        typeof(string[]),
        arr1, arr2
    )
)
---- VBCompiler.LeftShift
Lambda(
    LeftShift(i,
        And(j,
            Constant(31)
        )
    )
)
---- VBCompiler.LessThan
Lambda(
    LessThan(i, j)
)
---- VBCompiler.LessThanOrEqual
Lambda(
    LessThanOrEqual(i, j)
)
---- VBCompiler.LogicalNot
Lambda(
    Not(b)
)
---- VBCompiler.Modulo
Lambda(
    Modulo(x, y)
)
---- VBCompiler.MultidimensionalArrayOfArray
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(3),
        Constant(2)
    )
)
---- VBCompiler.MultidimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(2),
        Constant(3)
    )
)
---- VBCompiler.Multiply
Lambda(
    Multiply(x, y)
)
---- VBCompiler.NamedType
Lambda(
    New(
        typeof(Random).GetConstructor()
    )
)
---- VBCompiler.NamedTypeConstructorParameters
Lambda(
    New(
        typeof(Foo).GetConstructor(),
        Constant("ijkl")
    )
)
---- VBCompiler.NamedTypeConstructorParametersWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(),
            Constant("ijkl")
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz"),
            Constant("efgh")
        )
    )
)
---- VBCompiler.NamedTypeWithInitializer
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor()
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        )
    )
)
---- VBCompiler.NamedTypeWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor()
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz"),
            Constant("efgh")
        )
    )
)
---- VBCompiler.Negate
Lambda(
    NegateChecked(i)
)
---- VBCompiler.NonInteger
Lambda(
    Constant(7.32)
)
---- VBCompiler.NoParametersNonVoidReturn
Lambda(
    Constant("abcd")
)
---- VBCompiler.NoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine")
    )
)
---- VBCompiler.NotEqual
Lambda(
    NotEqual(i, j)
)
---- VBCompiler.Nothing
Lambda(
    Constant(null)
)
---- VBCompiler.NothingString
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- VBCompiler.OneParameterNonVoidReturn
Lambda(s,
    var s = Parameter(
        typeof(string),
        "s"
    )
)
---- VBCompiler.OneParameterVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        s
    ),
    var s = Parameter(
        typeof(string),
        "s"
    )
)
---- VBCompiler.OrBitwise
Lambda(
    Or(i, j)
)
---- VBCompiler.OrElse
Lambda(
    OrElse(b1, b2)
)
---- VBCompiler.OrLogical
Lambda(
    Or(b1, b2)
)
---- VBCompiler.Power
Lambda(
    Power(x, y)
)
---- VBCompiler.RightShift
Lambda(
    RightShift(i,
        And(j,
            Constant(31)
        )
    )
)
---- VBCompiler.SingleDimensionInit
Lambda(
    NewArrayInit(
        typeof(string),
        Constant("")
    )
)
---- VBCompiler.SingleDimensionInitExplicitType
Lambda(
    NewArrayInit(
        typeof(object),
        Convert(
            Constant(""),
            typeof(object)
        )
    )
)
---- VBCompiler.SingleDimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(5)
    )
)
---- VBCompiler.StaticMember
Lambda(
    MakeMemberAccess(null,
        typeof(string).GetField("Empty")
    )
)
---- VBCompiler.StaticMethod0Arguments
Lambda(
    Call(
        typeof(Dummy).GetMethod("DummyMethod")
    )
)
---- VBCompiler.StaticMethod1Argument
Lambda(
    Call(
        typeof(string).GetMethod("Intern"),
        Constant("")
    )
)
---- VBCompiler.StaticMethod2Arguments
Lambda(
    Call(
        typeof(string).GetMethod("Join"),
        Constant(","),
        NewArrayInit(
            typeof(string),
            New(
                typeof(string).GetConstructor(),
                arr
            )
        )
    )
)
---- VBCompiler.StaticMethod2ArgumentsWithoutConversion
Lambda(
    Call(
        typeof(string).GetMethod("Join"),
        Constant(","), arr
    )
)
---- VBCompiler.String
Lambda(
    Constant("abcd")
)
---- VBCompiler.StringConcat
Lambda(
    Call(
        typeof(string).GetMethod("Concat"),
        s1, s2
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- VBCompiler.StringConcatOperator
Lambda(
    Call(
        typeof(string).GetMethod("Concat"),
        s1, s2
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- VBCompiler.StringConcatOperatorParamArray
Lambda(
    Call(
        typeof(string).GetMethod("Concat"),
        NewArrayInit(
            typeof(string),
            s1, s2, s1, s2, s1, s2
        )
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- VBCompiler.Subtract
Lambda(
    Subtract(x, y)
)
---- VBCompiler.True
Lambda(
    Constant(true)
)
---- VBCompiler.TwoParametersNonVoidReturn
Lambda(
    Call(
        typeof(string).GetMethod("Concat"),
        s1, s2
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- VBCompiler.TwoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine"),
        Call(
            typeof(string).GetMethod("Concat"),
            s1, s2
        )
    ),
    var s1 = Parameter(
        typeof(string),
        "s1"
    ),
    var s2 = Parameter(
        typeof(string),
        "s2"
    )
)
---- VBCompiler.TypeAs
Lambda(
    TypeAs(o,
        typeof(string)
    )
)
---- VBCompiler.TypeCheck
Lambda(
    TypeIs(
        Constant(""),
        typeof(string)
    )
)
---- VBCompiler.TypeIndexer
Lambda(
    Property(lst,
        typeof(List<string>).GetProperty("Item"),
        Constant(3)
    )
)
---- VBCompiler.VBDeclaredTypeIndexer
Lambda(
    Property(x,
        typeof(DummyWithDefault).GetProperty("Item"),
        Constant(5)
    )
)
---- VBCompiler.LeftEnumNonConstant
Lambda(
    GreaterThanOrEqual(
        ConvertChecked(dow,
            typeof(int)
        ),
        Constant(2)
    )
)
---- VBCompiler.RightEnumNonConstant
Lambda(
    LessThanOrEqual(
        Constant(2),
        ConvertChecked(dow,
            typeof(int)
        )
    )
)
---- VBCompiler.DualNonConstant
Lambda(
    Equal(
        ConvertChecked(dow1,
            typeof(int)
        ),
        ConvertChecked(dow2,
            typeof(int)
        )
    )
)
---- CSCompiler.LeftEnumNonConstant
Lambda(
    GreaterThanOrEqual(
        Convert(dow,
            typeof(int)
        ),
        Constant(2)
    )
)
---- CSCompiler.RightEnumNonConstant
Lambda(
    LessThanOrEqual(
        Constant(2),
        Convert(dow,
            typeof(int)
        )
    )
)
---- CSCompiler.DualNonConstant
Lambda(
    Equal(
        Convert(dow1,
            typeof(int)
        ),
        Convert(dow2,
            typeof(int)
        )
    )
)
------