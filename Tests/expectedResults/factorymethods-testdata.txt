---- CSCompiler.Add
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Add(
        x,
        y
    )
)
---- CSCompiler.AndAlso
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    AndAlso(
        b1,
        b2
    )
)
---- CSCompiler.AndBitwise
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    And(
        i,
        j
    )
)
---- CSCompiler.AndLogical
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    And(
        b1,
        b2
    )
)
---- CSCompiler.AnonymousType
Lambda(
    New(
        typeof(<anonymous({ string Bar, string Baz })>).GetConstructor(new[] { typeof(string), typeof(string) }),
        Constant("abcd"),
        Constant("efgh")
    )
)
---- CSCompiler.AnonymousTypeFromVariables
var Bar = Parameter(
    typeof(string),
    "Bar"
);
var Baz = Parameter(
    typeof(string),
    "Baz"
);

Lambda(
    New(
        typeof(<anonymous({ string Bar, string Baz })>).GetConstructor(new[] { typeof(string), typeof(string) }),
        Bar,
        Baz
    )
)
---- CSCompiler.ArrayIndex
var arr = Parameter(
    typeof(string[]),
    "arr"
);

Lambda(
    ArrayIndex(
        arr,
        Constant(0)
    )
)
---- CSCompiler.ArrayLength
var arr = Parameter(
    typeof(string[]),
    "arr"
);

Lambda(
    ArrayLength(
        arr
    )
)
---- CSCompiler.ArrayMultipleIndex
var arr = Parameter(
    typeof(string[,]),
    "arr"
);

Lambda(
    ArrayIndex(
        arr,
        Constant(5),
        Constant(6)
    )
)
---- CSCompiler.ArrayOfMultidimensionalArray
Lambda(
    NewArrayBounds(
        typeof(string[,]),
        Constant(5)
    )
)
---- CSCompiler.ArraySingleIndex
var arr = Parameter(
    typeof(string[]),
    "arr"
);

Lambda(
    ArrayIndex(
        arr,
        Constant(5)
    )
)
---- CSCompiler.BitwiseNot
var i = Parameter(
    typeof(int),
    "i"
);

Lambda(
    Not(
        i
    )
)
---- CSCompiler.ClosedVariable
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    s
)
---- CSCompiler.Coalesce
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Coalesce(
        s1,
        s2
    )
)
---- CSCompiler.CollectionTypeWithInitializer
Lambda(
    ListInit(
        New(
            typeof(List<string>).GetConstructor(new Type[] { })
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("abcd")
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("efgh")
        )
    )
)
---- CSCompiler.CollectionTypeWithMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor(new Type[] { })
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- CSCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor(new Type[] { })
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("ef")
        )
    )
)
---- CSCompiler.Conditional
var i = Parameter(
    typeof(int),
    "i"
);

Lambda(
    Condition(
        GreaterThan(i,
            Constant(10)
        ),
        i,
        Add(i,
            Constant(10)
        )
    ),
    i
)
---- CSCompiler.Convert
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Convert(
        lst,
        typeof(object)
    )
)
---- CSCompiler.DefaultRefType
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- CSCompiler.DefaultValueType
Lambda(
    Constant(0)
)
---- CSCompiler.Divide
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Divide(
        x,
        y
    )
)
---- CSCompiler.Equal
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    Equal(
        i,
        j
    )
)
---- CSCompiler.ExclusiveOrBitwise
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    ExclusiveOr(
        i,
        j
    )
)
---- CSCompiler.ExclusiveOrLogical
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    ExclusiveOr(
        b1,
        b2
    )
)
---- CSCompiler.ExtensionMethod0Arguments
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Enumerable).GetMethod("Count", new[] { typeof(IEnumerable<string>) }),
        lst
    )
)
---- CSCompiler.False
Lambda(
    Constant(false)
)
---- CSCompiler.GreaterThan
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    GreaterThan(
        i,
        j
    )
)
---- CSCompiler.GreaterThanOrEqual
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    GreaterThanOrEqual(
        i,
        j
    )
)
---- CSCompiler.InstanceMember
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    MakeMemberAccess(
        s,
        typeof(string).GetProperty("Length")
    )
)
---- CSCompiler.InstanceMethod0Arguments
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        s,
        typeof(object).GetMethod("ToString")
    )
)
---- CSCompiler.InstanceMethod1Argument
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        s,
        typeof(string).GetMethod("CompareTo", new[] { typeof(string) }),
        Constant("")
    )
)
---- CSCompiler.InstanceMethod2Arguments
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        s,
        typeof(string).GetMethod("IndexOf", new[] { typeof(char), typeof(int) }),
        Constant('a'),
        Constant(2)
    )
)
---- CSCompiler.Integer
Lambda(
    Constant(5)
)
---- CSCompiler.InterpolatedString
Lambda(
    Call(
        typeof(string).GetMethod("Format", new[] { typeof(string), typeof(object) }),
        Constant("{0:yyyy-MM-dd}"),
        Convert(
            New(
                typeof(DateTime).GetConstructor(new[] { typeof(int), typeof(int), typeof(int) }),
                Constant(2001),
                Constant(3),
                Constant(25)
            ),
            typeof(object)
        )
    )
)
---- CSCompiler.InvocationNoArguments
var del = Parameter(
    typeof(Func<int>),
    "del"
);

Lambda(
    Invoke(
        del
    )
)
---- CSCompiler.InvocationOneArgument
var del = Parameter(
    typeof(Func<int, int>),
    "del"
);

Lambda(
    Invoke(
        del,
        Constant(5)
    )
)
---- CSCompiler.JaggedWithBounds
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(5)
    )
)
---- CSCompiler.JaggedWithElementsExplicitType
Lambda(
    NewArrayInit(
        typeof(object[]),
        NewArrayInit(
            typeof(string),
            Constant("ab"),
            Constant("cd")
        ),
        NewArrayInit(
            typeof(string),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- CSCompiler.JaggedWithElementsImplicitType
Lambda(
    NewArrayInit(
        typeof(string[]),
        NewArrayInit(
            typeof(string),
            Constant("ab"),
            Constant("cd")
        ),
        NewArrayInit(
            typeof(string),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- CSCompiler.LeftShift
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    LeftShift(
        i,
        j
    )
)
---- CSCompiler.LessThan
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    LessThan(
        i,
        j
    )
)
---- CSCompiler.LessThanOrEqual
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    LessThanOrEqual(
        i,
        j
    )
)
---- CSCompiler.ListBinding
Lambda(
    MemberInit(
        New(
            typeof(Node).GetConstructor(new Type[] { })
        ),
        ListBind(
            typeof(Node).GetProperty("Children", BindingFlags.Instance | BindingFlags.NonPublic),
            ElementInit(
                typeof(ICollection<Node>).GetMethod("Add"),
                New(
                    typeof(Node).GetConstructor(new Type[] { })
                )
            ),
            ElementInit(
                typeof(ICollection<Node>).GetMethod("Add"),
                New(
                    typeof(Node).GetConstructor(new Type[] { })
                )
            )
        )
    )
)
---- CSCompiler.LogicalNot
var b = Parameter(
    typeof(bool),
    "b"
);

Lambda(
    Not(
        b
    )
)
---- CSCompiler.MathPow
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Call(
        typeof(Math).GetMethod("Pow"),
        x, y
    ),
    x, y
)
---- CSCompiler.MemberMemberBinding
Lambda(
    MemberInit(
        New(
            typeof(Node).GetConstructor(new Type[] { })
        ),
        MemberBind(
            typeof(Node).GetProperty("Data", BindingFlags.Instance | BindingFlags.NonPublic),
            Bind(
                typeof(NodeData).GetProperty("Name", BindingFlags.Instance | BindingFlags.NonPublic),
                Constant("abcd")
            )
        )
    )
)
---- CSCompiler.Modulo
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Modulo(
        x,
        y
    )
)
---- CSCompiler.MultidimensionalArrayOfArray
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(3),
        Constant(2)
    )
)
---- CSCompiler.MultidimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(2),
        Constant(3)
    )
)
---- CSCompiler.Multiply
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Multiply(
        x,
        y
    )
)
---- CSCompiler.NamedType
Lambda(
    New(
        typeof(Random).GetConstructor(new Type[] { })
    )
)
---- CSCompiler.NamedTypeConstructorParameters
Lambda(
    New(
        typeof(Foo).GetConstructor(new[] { typeof(string) }),
        Constant("ijkl")
    )
)
---- CSCompiler.NamedTypeConstructorParametersWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(new[] { typeof(string) }),
            Constant("ijkl")
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz"),
            Constant("efgh")
        )
    )
)
---- CSCompiler.NamedTypeWithInitializer
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(new Type[] { })
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        )
    )
)
---- CSCompiler.NamedTypeWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(new Type[] { })
        ),
        Bind(
            typeof(Foo).GetProperty("Bar"),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz"),
            Constant("efgh")
        )
    )
)
---- CSCompiler.Negate
var i = Parameter(
    typeof(int),
    "i"
);

Lambda(
    Negate(
        i
    )
)
---- CSCompiler.NonInteger
Lambda(
    Constant(7.32)
)
---- CSCompiler.NoParametersNonVoidReturn
Lambda(
    Constant("abcd")
)
---- CSCompiler.NoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new Type[] { })
    )
)
---- CSCompiler.NotEqual
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    NotEqual(
        i,
        j
    )
)
---- CSCompiler.Nothing
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- CSCompiler.OneParameterNonVoidReturn
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(s, s)
---- CSCompiler.OneParameterVoidReturn
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(string) }),
        s
    ),
    s
)
---- CSCompiler.OrBitwise
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    Or(
        i,
        j
    )
)
---- CSCompiler.OrElse
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    OrElse(
        b1,
        b2
    )
)
---- CSCompiler.OrLogical
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    Or(
        b1,
        b2
    )
)
---- CSCompiler.RightShift
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    RightShift(
        i,
        j
    )
)
---- CSCompiler.SingleDimensionInit
Lambda(
    NewArrayInit(
        typeof(string),
        Constant("")
    )
)
---- CSCompiler.SingleDimensionInitExplicitType
Lambda(
    NewArrayInit(
        typeof(object),
        Constant("")
    )
)
---- CSCompiler.SingleDimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(5)
    )
)
---- CSCompiler.StaticMember
Lambda(
    MakeMemberAccess(null,
        typeof(string).GetField("Empty")
    )
)
---- CSCompiler.StaticMethod0Arguments
Lambda(
    Call(
        typeof(Dummy).GetMethod("DummyMethod")
    )
)
---- CSCompiler.StaticMethod1Argument
Lambda(
    Call(
        typeof(string).GetMethod("Intern"),
        Constant("")
    )
)
---- CSCompiler.StaticMethod2Arguments
Lambda(
    Call(
        typeof(string).GetMethod("Join", 0, new[] { typeof(string), typeof(string[]) }),
        Constant(","),
        NewArrayInit(
            typeof(string),
            Constant("a"),
            Constant("b")
        )
    )
)
---- CSCompiler.String
Lambda(
    Constant("abcd")
)
---- CSCompiler.StringConcat
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) }),
        s1, s2
    ),
    s1, s2
)
---- CSCompiler.Subtract
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Subtract(
        x,
        y
    )
)
---- CSCompiler.True
Lambda(
    Constant(true)
)
---- CSCompiler.TwoParametersNonVoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Add(s1, s2,
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) })
    ),
    s1, s2
)
---- CSCompiler.TwoParametersVoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(string) }),
        Add(s1, s2,
            typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) })
        )
    ),
    s1, s2
)
---- CSCompiler.Type
Lambda(
    Constant(
        typeof(string),
        typeof(Type)
    )
)
---- CSCompiler.TypeAs
var o = Parameter(
    typeof(object),
    "o"
);

Lambda(
    TypeAs(
        o,
        typeof(string)
    )
)
---- CSCompiler.TypeCheck
var o = Parameter(
    typeof(object),
    "o"
);

Lambda(
    TypeIs(
        o,
        typeof(string)
    )
)
---- CSCompiler.TypeIndexer
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Property(
        lst,
        typeof(List<string>).GetProperty("Item"),
        Constant(3)
    )
)
---- FactoryMethods.Array
Constant(new[] { "abcd", 5, #Random })
---- FactoryMethods.ArrayOfMultidimensionalArray
NewArrayBounds(
    typeof(string[,]),
    Constant(5)
)
---- FactoryMethods.BlockMultipleVariable
var i = Parameter(
    typeof(int),
    "i"
);
var s1 = Parameter(
    typeof(string),
    "s1"
);

Block(new[] { i, s1 },
    Constant(true),
    Constant(true)
)
---- FactoryMethods.BlockNoVariables
Block(
    Constant(true),
    Constant(true)
)
---- FactoryMethods.BlockSingleVariable
var i = Parameter(
    typeof(int),
    "i"
);

Block(new[] { i },
    Constant(true),
    Constant(true)
)
---- FactoryMethods.CollectionTypeWithInitializer
ListInit(
    New(
        typeof(List<string>).GetConstructor(new Type[] { })
    ),
    ElementInit(
        typeof(List<string>).GetMethod("Add"),
        Constant("abcd")
    ),
    ElementInit(
        typeof(List<string>).GetMethod("Add"),
        Constant("efgh")
    )
)
---- FactoryMethods.CollectionTypeWithMultiElementInitializers
ListInit(
    New(
        typeof(Wrapper).GetConstructor(new Type[] { })
    ),
    ElementInit(
        typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
        Constant("ab"),
        Constant("cd")
    ),
    ElementInit(
        typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
        Constant("ef"),
        Constant("gh")
    )
)
---- FactoryMethods.CollectionTypeWithSingleOrMultiElementInitializers
ListInit(
    New(
        typeof(Wrapper).GetConstructor(new Type[] { })
    ),
    ElementInit(
        typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
        Constant("ab"),
        Constant("cd")
    ),
    ElementInit(
        typeof(List<string>).GetMethod("Add"),
        Constant("ef")
    )
)
---- FactoryMethods.ConstructAdd
Add(x, y)
---- FactoryMethods.ConstructAddAssign
AddAssign(i, j)
---- FactoryMethods.ConstructAddAssignChecked
AddAssignChecked(i, j)
---- FactoryMethods.ConstructAddChecked
AddChecked(x, y)
---- FactoryMethods.ConstructAndAlso
AndAlso(b1, b2)
---- FactoryMethods.ConstructAndAssign
AndAssign(b1, b2)
---- FactoryMethods.ConstructAndBitwise
And(i, j)
---- FactoryMethods.ConstructAndLogical
And(b1, b2)
---- FactoryMethods.ConstructArrayIndex
ArrayIndex(arr, i)
---- FactoryMethods.ConstructArrayLength
ArrayLength(arr)
---- FactoryMethods.ConstructAssign
Assign(x,
    Constant(5.2)
)
---- FactoryMethods.ConstructBitwiseNot
Not(i)
---- FactoryMethods.ConstructCatchMultiStatement
Catch(ex,
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    )
)
---- FactoryMethods.ConstructCatchMultiStatementWithFilter
Catch(ex,
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    ),
    Constant(true)
)
---- FactoryMethods.ConstructCatchMultiStatementWithType
Catch(
    typeof(InvalidCastException),
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    )
)
---- FactoryMethods.ConstructCatchSingleStatement
Catch(ex,
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.ConstructCatchSingleStatementWithFilter
Catch(ex,
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.ConstructCatchSingleStatementWithType
Catch(
    typeof(InvalidCastException),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.ConstructCatchWithMultiStatementFilter
Catch(ex,
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Block(
        Constant(true),
        Constant(true)
    )
)
---- FactoryMethods.ConstructCoalesce
Coalesce(s1, s2)
---- FactoryMethods.ConstructConvert
Convert(arr,
    typeof(object)
)
---- FactoryMethods.ConstructConvertChecked
ConvertChecked(
    Constant(5),
    typeof(float)
)
---- FactoryMethods.ConstructConvertCheckedForReferenceType
Convert(arr,
    typeof(object)
)
---- FactoryMethods.ConstructDecrement
Decrement(i)
---- FactoryMethods.ConstructDivide
Divide(x, y)
---- FactoryMethods.ConstructDivideAssign
DivideAssign(i, j)
---- FactoryMethods.ConstructEmptyLabelTarget
Label("")
---- FactoryMethods.ConstructEqual
Equal(x, y)
---- FactoryMethods.ConstructExclusiveOrAssign
ExclusiveOrAssign(b1, b2)
---- FactoryMethods.ConstructExclusiveOrBitwise
ExclusiveOr(i, j)
---- FactoryMethods.ConstructExclusiveOrLogical
ExclusiveOr(b1, b2)
---- FactoryMethods.DynamicGetIndex
Dynamic(
    #CSharpGetIndexBinder,
    typeof(object), obj,
    Constant("key")
)
---- FactoryMethods.DynamicGetIndexMultipleKeys
Dynamic(
    #CSharpGetIndexBinder,
    typeof(object), obj,
    Constant("key"),
    Constant(1)
)
---- FactoryMethods.DynamicGetMember
Dynamic(
    #CSharpGetMemberBinder,
    typeof(object), obj
)
---- FactoryMethods.ConstructGreaterThan
GreaterThan(x, y)
---- FactoryMethods.ConstructGreaterThanOrEqual
GreaterThanOrEqual(x, y)
---- FactoryMethods.ConstructIncrement
Increment(i)
---- FactoryMethods.DynamicInvocationNoArguments
Dynamic(
    #CSharpInvokeBinder,
    typeof(object), obj
)
---- FactoryMethods.DynamicInvocationWithArguments
Dynamic(
    #CSharpInvokeBinder,
    typeof(object), obj,
    Constant("arg1"),
    Constant(15)
)
---- FactoryMethods.ConstructIsFalse
IsFalse(b1)
---- FactoryMethods.ConstructIsTrue
IsTrue(b1)
---- FactoryMethods.ConstructLabel
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Block(new[] { i },
    Block(new[] { j },
        Constant(true),
        Label(
            Label("target"),
            null
        ),
        Constant(true)
    )
)
---- FactoryMethods.ConstructLabel1
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Block(new[] { i },
    Block(new[] { j },
        Label(
            Label("target"),
            null
        ),
        Constant(true)
    )
)
---- FactoryMethods.ConstructLabelTarget
Label("target")
---- FactoryMethods.ConstructLeftShift
LeftShift(i, j)
---- FactoryMethods.ConstructLeftShiftAssign
LeftShiftAssign(i, j)
---- FactoryMethods.ConstructLessThan
LessThan(x, y)
---- FactoryMethods.ConstructLessThanOrEqual
LessThanOrEqual(x, y)
---- FactoryMethods.ConstructLogicalNot
Not(b1)
---- FactoryMethods.DynamicMemberInvocationNoArguments
Dynamic(
    #CSharpInvokeMemberBinder,
    typeof(object), obj
)
---- FactoryMethods.DynamicMemberInvocationWithArguments
Dynamic(
    #CSharpInvokeMemberBinder,
    typeof(object), obj,
    Constant("arg1"),
    Constant(15)
)
---- FactoryMethods.ConstructModulo
Modulo(x, y)
---- FactoryMethods.ConstructModuloAssign
ModuloAssign(i, j)
---- FactoryMethods.ConstructMultiply
Multiply(x, y)
---- FactoryMethods.ConstructMultiplyAssign
MultiplyAssign(i, j)
---- FactoryMethods.ConstructMultiplyAssignChecked
MultiplyAssignChecked(i, j)
---- FactoryMethods.ConstructMultiplyChecked
MultiplyChecked(x, y)
---- FactoryMethods.ConstructNegate
Negate(i)
---- FactoryMethods.ConstructNotEqual
NotEqual(x, y)
---- FactoryMethods.ConstructOrAssign
OrAssign(b1, b2)
---- FactoryMethods.ConstructOrBitwise
Or(i, j)
---- FactoryMethods.ConstructOrElse
OrElse(b1, b2)
---- FactoryMethods.ConstructOrLogical
Or(b1, b2)
---- FactoryMethods.ConstructPostDecrementAssign
PostDecrementAssign(i)
---- FactoryMethods.ConstructPostIncrementAssign
PostIncrementAssign(i)
---- FactoryMethods.ConstructPower
Power(x, y)
---- FactoryMethods.ConstructPowerAssign
PowerAssign(x, y)
---- FactoryMethods.ConstructPreDecrementAssign
PreDecrementAssign(i)
---- FactoryMethods.ConstructPreIncrementAssign
PreIncrementAssign(i)
---- FactoryMethods.ConstructReferenceEqual
Equal(lstString, lstString)
---- FactoryMethods.ConstructReferenceNotEqual
NotEqual(lstString, lstString)
---- FactoryMethods.ConstructRethrow
Throw(null)
---- FactoryMethods.ConstructRightShift
RightShift(i, j)
---- FactoryMethods.ConstructRightShiftAssign
RightShiftAssign(i, j)
---- FactoryMethods.ConstructRuntimeVariables
RuntimeVariables(x, s1)
---- FactoryMethods.DynamicSetIndex
Dynamic(
    #CSharpSetIndexBinder,
    typeof(object), obj,
    Constant(42),
    Constant("key")
)
---- FactoryMethods.DynamicSetIndexMultipleKeys
Dynamic(
    #CSharpSetIndexBinder,
    typeof(object), obj,
    Constant(42),
    Constant("key"),
    Constant(1)
)
---- FactoryMethods.DynamicSetMember
Dynamic(
    #CSharpSetMemberBinder,
    typeof(object), obj,
    Constant(42)
)
---- FactoryMethods.ConstructSimpleCatch
Catch(
    typeof(Exception),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.ConstructSubtract
Subtract(x, y)
---- FactoryMethods.ConstructSubtractAssign
SubtractAssign(i, j)
---- FactoryMethods.ConstructSubtractAssignChecked
SubtractAssignChecked(i, j)
---- FactoryMethods.ConstructSubtractChecked
SubtractChecked(x, y)
---- FactoryMethods.ConstructThrow
Throw(
    Constant(#Random)
)
---- FactoryMethods.ConstructTryCatch
TryCatch(
    Constant(true),
    Catch(
        typeof(Exception),
        Constant(true)
    )
)
---- FactoryMethods.ConstructTryCatchFinally
TryCatchFinally(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Catch(ex,
        Constant(true)
    )
)
---- FactoryMethods.ConstructTryFault
TryFault(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.ConstructTryFinally
TryFinally(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.ConstructTypeAs
TypeAs(arr,
    typeof(object)
)
---- FactoryMethods.DifferentTypeForNodeAndValue
Constant(#List<string>,
    typeof(IEnumerable)
)
---- FactoryMethods.EmptyLoop
Loop(
    Constant(true)
)
---- FactoryMethods.EmptyLoop1
Loop(
    Block(
        Constant(true),
        Constant(true)
    )
)
---- FactoryMethods.ExtensionMethod0Arguments
Call(
    typeof(Enumerable).GetMethod("Count", new[] { typeof(IEnumerable<string>) }),
    lstString
)
---- FactoryMethods.InstanceIndexer
MakeIndex(lstString,
    typeof(List<string>).GetProperty("Item"),
    new[] {
        Constant(0)
    }
)
---- FactoryMethods.InstanceMember
MakeMemberAccess(
    Constant(""),
    typeof(string).GetProperty("Length")
)
---- FactoryMethods.InstanceMethod0Arguments
Call(s,
    typeof(object).GetMethod("ToString")
)
---- FactoryMethods.InstanceMethod1Argument
Call(s,
    typeof(string).GetMethod("CompareTo", new[] { typeof(string) }),
    Constant("")
)
---- FactoryMethods.InstanceMethod2Arguments
Call(s,
    typeof(string).GetMethod("IndexOf", new[] { typeof(char), typeof(int) }),
    Constant('a'),
    Constant(2)
)
---- FactoryMethods.JaggedWithBounds
NewArrayBounds(
    typeof(string[]),
    Constant(5)
)
---- FactoryMethods.JaggedWithElementsExplicitType
NewArrayInit(
    typeof(object[]),
    NewArrayInit(
        typeof(string),
        Constant("ab"),
        Constant("cd")
    ),
    NewArrayInit(
        typeof(string),
        Constant("ef"),
        Constant("gh")
    )
)
---- FactoryMethods.JaggedWithElementsImplicitType
NewArrayInit(
    typeof(string[]),
    NewArrayInit(
        typeof(string),
        Constant("ab"),
        Constant("cd")
    ),
    NewArrayInit(
        typeof(string),
        Constant("ef"),
        Constant("gh")
    )
)
---- FactoryMethods.LambdaMultilineBlockNonvoidReturn
Lambda(
    Block(
        Constant(true),
        Constant(true)
    )
)
---- FactoryMethods.LambdaMultilineNestedBlockNonvoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Block(
        Constant(true),
        Block(new[] { s1, s2 },
            Constant(true),
            Constant(true)
        )
    )
)
---- FactoryMethods.MakeArrayAccess
ArrayAccess(arr,
    Constant(0)
)
---- FactoryMethods.MakeArrayIndex
ArrayIndex(arr,
    Constant(0)
)
---- FactoryMethods.MakeArrayMultipleIndex
ArrayIndex(arr2d,
    Constant(0),
    Constant(1)
)
---- FactoryMethods.MakeBreak
Break(
    Label("target")
)
---- FactoryMethods.MakeBreakWithValue
Break(
    Label("target"),
    Constant(5)
)
---- FactoryMethods.MakeClearDebugInfo
ClearDebugInfo(#SymbolDocumentInfo)
---- FactoryMethods.MakeConditional
Condition(
    GreaterThan(i,
        Constant(10)
    ),
    i,
    Add(i,
        Constant(10)
    )
)
---- FactoryMethods.MakeContinue
Continue(
    Label("target")
)
---- FactoryMethods.MakeDebugInfo
DebugInfo(#SymbolDocumentInfo, 1, 2, 3, 4)
---- FactoryMethods.MakeDefaultRefType
Default(
    typeof(string)
)
---- FactoryMethods.MakeDefaultValueType
Default(
    typeof(int)
)
---- FactoryMethods.MakeElementInit
ElementInit(
    typeof(List<string>).GetMethod("Add"),
    Constant("abcd")
)
---- FactoryMethods.MakeElementInit2Arguments
ElementInit(
    typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic),
    Constant("abcd"),
    Constant("efgh")
)
---- FactoryMethods.MakeGotoWithoutValue
Goto(
    Label("target")
)
---- FactoryMethods.MakeGotoWithValue
Goto(
    Label("target"),
    Constant(5)
)
---- FactoryMethods.MakeInvocation
Invoke(
    Lambda(
        Constant(5)
    )
)
---- FactoryMethods.MakeListBinding
ListBind(
    typeof(Node).GetProperty("Children", BindingFlags.Instance | BindingFlags.NonPublic),
    ElementInit(
        typeof(ICollection<Node>).GetMethod("Add"),
        New(
            typeof(Node).GetConstructor(new Type[] { })
        )
    ),
    ElementInit(
        typeof(ICollection<Node>).GetMethod("Add"),
        New(
            typeof(Node).GetConstructor(new Type[] { })
        )
    )
)
---- FactoryMethods.MakeMemberBind
Bind(
    typeof(DummyMember).GetProperty("Foo", BindingFlags.Instance | BindingFlags.NonPublic),
    Constant("abcd")
)
---- FactoryMethods.MakeMemberMemberBind
MemberBind(
    typeof(Node).GetProperty("Data", BindingFlags.Instance | BindingFlags.NonPublic),
    Bind(
        typeof(NodeData).GetProperty("Name", BindingFlags.Instance | BindingFlags.NonPublic),
        Constant("abcd")
    )
)
---- FactoryMethods.MakeQuoted
var x = Parameter(
    typeof(double),
    "x"
);

Block(new[] { x },
    Quote(
        Lambda(
            Call(
                typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
                Constant(true)
            )
        )
    )
)
---- FactoryMethods.MakeQuoted1
Lambda(
    Quote(
        Lambda(
            Call(
                typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
                Constant(true)
            )
        )
    )
)
---- FactoryMethods.MakeReturn
Return(
    Label("target")
)
---- FactoryMethods.MakeReturnWithValue
Return(
    Label("target"),
    Constant(5)
)
---- FactoryMethods.MakeTypeCheck
TypeIs(
    Constant(""),
    typeof(string)
)
---- FactoryMethods.MakeTypeEqual
TypeEqual(
    Constant(""),
    typeof(IEnumerable)
)
---- FactoryMethods.MultidimensionalArrayOfArray
NewArrayBounds(
    typeof(string[]),
    Constant(3),
    Constant(2)
)
---- FactoryMethods.MultidimensionWithBounds
NewArrayBounds(
    typeof(string),
    Constant(2),
    Constant(3)
)
---- FactoryMethods.MultilineIfFalse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        )
    )
)
---- FactoryMethods.MultilineIfTrue
IfThen(
    Constant(true),
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    )
)
---- FactoryMethods.MultilineLambda
Lambda(
    IfThen(
        Constant(true),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    )
)
---- FactoryMethods.MultilineTestPart
Condition(
    Block(
        Constant(true),
        Constant(true)
    ),
    MakeMemberAccess(
        Constant("true"),
        typeof(string).GetProperty("Length")
    ),
    MakeMemberAccess(
        Constant("false"),
        typeof(string).GetProperty("Length")
    )
)
---- FactoryMethods.MultilineTestPart1
IfThen(
    Block(
        Constant(true),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.MultiValueSwitchCase
SwitchCase(
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    ),
    Constant(5),
    Constant(6)
)
---- FactoryMethods.MultiValueSwitchCase1
SwitchCase(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Constant(5),
    Constant(6)
)
---- FactoryMethods.NamedLambda
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Add(s1, s2,
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) })
    ),
    "name", s1, s2
)
---- FactoryMethods.NamedType
New(
    typeof(Random).GetConstructor(new Type[] { })
)
---- FactoryMethods.NamedTypeConstructorParameters
New(
    typeof(Foo).GetConstructor(new[] { typeof(string) }),
    Constant("ijkl")
)
---- FactoryMethods.NamedTypeConstructorParametersWithInitializers
MemberInit(
    New(
        typeof(Foo).GetConstructor(new[] { typeof(string) }),
        Constant("ijkl")
    ),
    Bind(
        typeof(Foo).GetProperty("Bar"),
        Constant("abcd")
    ),
    Bind(
        typeof(Foo).GetProperty("Baz"),
        Constant("efgh")
    )
)
---- FactoryMethods.NamedTypeWithInitializer
MemberInit(
    New(
        typeof(Foo).GetConstructor(new Type[] { })
    ),
    Bind(
        typeof(Foo).GetProperty("Bar"),
        Constant("abcd")
    )
)
---- FactoryMethods.NamedTypeWithInitializers
MemberInit(
    New(
        typeof(Foo).GetConstructor(new Type[] { })
    ),
    Bind(
        typeof(Foo).GetProperty("Bar"),
        Constant("abcd")
    ),
    Bind(
        typeof(Foo).GetProperty("Baz"),
        Constant("efgh")
    )
)
---- FactoryMethods.NestedBlockInBlockSyntax
IfThen(
    Constant(true),
    Block(
        Constant(true),
        Block(
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    )
)
---- FactoryMethods.NestedBlockInBlockSyntaxWithVariable
var s1 = Parameter(
    typeof(string),
    "s1"
);

IfThen(
    Constant(true),
    Block(
        Constant(true),
        Block(new[] { s1 },
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    )
)
---- FactoryMethods.NestedBlockInTest
IfThen(
    Block(
        Constant(true),
        Block(
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedBlockInTestWithVariables
var s1 = Parameter(
    typeof(string),
    "s1"
);

IfThen(
    Block(
        Constant(true),
        Block(new[] { s1 },
            Constant(true),
            Constant(true)
        ),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedElse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    IfThen(
        Constant(true),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    )
)
---- FactoryMethods.NestedIfThen
IfThen(
    Constant(true),
    IfThen(
        Constant(true),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    )
)
---- FactoryMethods.NestedInlineBlock
Block(
    Constant(true),
    Block(
        Constant(true),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedInlineBlockWithVariable
var s1 = Parameter(
    typeof(string),
    "s1"
);

Block(
    Constant(true),
    Block(new[] { s1 },
        Constant(true),
        Constant(true)
    ),
    Constant(true)
)
---- FactoryMethods.NestedLambda
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Lambda(
        Add(s1, s2,
            typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) })
        ),
        s1, s2
    )
)
---- FactoryMethods.NonVoidConditionalWithElse
Condition(
    Constant(true),
    MakeMemberAccess(
        Constant("true"),
        typeof(string).GetProperty("Length")
    ),
    MakeMemberAccess(
        Constant("false"),
        typeof(string).GetProperty("Length")
    )
)
---- FactoryMethods.NonVoidConditionalWithoutElse
Condition(
    Constant(true),
    MakeMemberAccess(
        Constant("true"),
        typeof(string).GetProperty("Length")
    ),
    Default(
        typeof(int)
    )
)
---- FactoryMethods.NoParametersNonVoidReturn
Lambda(
    Constant("abcd")
)
---- FactoryMethods.NoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new Type[] { })
    )
)
---- FactoryMethods.OldTuple
Constant(Tuple.Create("abcd", 5))
---- FactoryMethods.OneParameterNonVoidReturn
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(s, s)
---- FactoryMethods.OneParameterVoidReturn
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(string) }),
        s
    ),
    s
)
---- FactoryMethods.PropertyIndexer
MakeIndex(lstString,
    typeof(List<string>).GetProperty("Item"),
    new[] {
        Constant(0)
    }
)
---- FactoryMethods.Random
Constant(#Random)
---- FactoryMethods.RuntimeVariablesWithinBlock
var s2 = Parameter(
    typeof(string),
    "s2"
);

Block(new[] { s2 },
    Constant(true),
    RuntimeVariables(x, s1)
)
---- FactoryMethods.SingleDimensionInit
NewArrayInit(
    typeof(string),
    Constant("")
)
---- FactoryMethods.SingleDimensionInitExplicitType
NewArrayInit(
    typeof(object),
    Constant("")
)
---- FactoryMethods.SingleDimensionWithBounds
NewArrayBounds(
    typeof(string),
    Constant(5)
)
---- FactoryMethods.SingleValueSwitchCase
SwitchCase(
    Block(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        )
    ),
    Constant(5)
)
---- FactoryMethods.SingleValueSwitchCase1
SwitchCase(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Constant(5)
)
---- FactoryMethods.StaticMember
MakeMemberAccess(null,
    typeof(string).GetField("Empty")
)
---- FactoryMethods.StaticMethod0Arguments
Call(
    typeof(Dummy).GetMethod("DummyMethod")
)
---- FactoryMethods.StaticMethod1Argument
Call(
    typeof(string).GetMethod("Intern"),
    Constant("")
)
---- FactoryMethods.StaticMethod2Arguments
Call(
    typeof(string).GetMethod("Join", 0, new[] { typeof(string), typeof(string[]) }),
    Constant(","),
    NewArrayInit(
        typeof(string),
        Constant("a"),
        Constant("b")
    )
)
---- FactoryMethods.StringConcat
Call(
    typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) }),
    s1, s2
)
---- FactoryMethods.SwitchOnExpressionWithDefaultMultiStatement
Switch(i,
    Block(
        typeof(void),
        Constant(true),
        Constant(true)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnExpressionWithDefaultSingleStatement
Switch(i,
    Empty(),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnExpressionWithoutDefault
Switch(i,
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnMultipleStatementsWithDefault
Switch(
    Block(i, j),
    Block(
        typeof(void),
        Constant(true),
        Constant(true)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.SwitchOnMultipleStatementsWithoutDefault
Switch(
    Block(i, j),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(true)
        ),
        Constant(4)
    ),
    SwitchCase(
        Call(
            typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
            Constant(false)
        ),
        Constant(5)
    )
)
---- FactoryMethods.TwoParametersNonVoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Add(s1, s2,
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) })
    ),
    s1, s2
)
---- FactoryMethods.TwoParametersVoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(string) }),
        Add(s1, s2,
            typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) })
        )
    ),
    s1, s2
)
---- FactoryMethods.Type
Constant(
    typeof(string)
)
---- FactoryMethods.ValueTuple
Constant(("abcd", 5))
---- FactoryMethods.VoidConditional1WithElse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(false)
    )
)
---- FactoryMethods.VoidConditional1WithoutElse
IfThen(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- FactoryMethods.VoidConditionalWithElse
IfThenElse(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    ),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(false)
    )
)
---- FactoryMethods.VoidConditionalWithoutElse
IfThen(
    Constant(true),
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(bool) }),
        Constant(true)
    )
)
---- VBCompiler.Add
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Add(
        x,
        y
    )
)
---- VBCompiler.AndAlso
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    AndAlso(
        b1,
        b2
    )
)
---- VBCompiler.AndBitwise
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    And(
        i,
        j
    )
)
---- VBCompiler.AndLogical
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    And(
        b1,
        b2
    )
)
---- VBCompiler.AnonymousType
Lambda(
    New(
        typeof(<anonymous({ string Bar, string Baz })>).GetConstructor(new[] { typeof(string), typeof(string) }),
        Constant("abcd"),
        Constant("efgh")
    )
)
---- VBCompiler.AnonymousTypeFromVariables
var Bar = Parameter(
    typeof(string),
    "Bar"
);
var Baz = Parameter(
    typeof(string),
    "Baz"
);

Lambda(
    New(
        typeof(<anonymous({ string Bar, string Baz })>).GetConstructor(new[] { typeof(string), typeof(string) }),
        Bar,
        Baz
    )
)
---- VBCompiler.ArrayIndex
var arr = Parameter(
    typeof(string[]),
    "arr"
);

Lambda(
    ArrayIndex(
        arr,
        Constant(0)
    )
)
---- VBCompiler.ArrayLength
var arr = Parameter(
    typeof(string[]),
    "arr"
);

Lambda(
    ArrayLength(
        arr
    )
)
---- VBCompiler.ArrayMultipleIndex
var arr = Parameter(
    typeof(string[,]),
    "arr"
);

Lambda(
    ArrayIndex(
        arr,
        Constant(5),
        Constant(6)
    )
)
---- VBCompiler.ArrayOfMultidimensionalArray
Lambda(
    NewArrayBounds(
        typeof(string[,]),
        Constant(5)
    )
)
---- VBCompiler.ArraySingleIndex
var arr = Parameter(
    typeof(string[]),
    "arr"
);

Lambda(
    ArrayIndex(
        arr,
        Constant(5)
    )
)
---- VBCompiler.BitwiseNot
var i = Parameter(
    typeof(int),
    "i"
);

Lambda(
    Not(
        i
    )
)
---- VBCompiler.ClosedVariable
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    s
)
---- VBCompiler.Coalesce
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Coalesce(
        s1,
        s2
    )
)
---- VBCompiler.CObject
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Convert(
        lst,
        typeof(object)
    )
)
---- VBCompiler.CollectionTypeWithInitializer
Lambda(
    ListInit(
        New(
            typeof(List<string>).GetConstructor(new Type[] { })
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("abcd")
        ),
        ElementInit(
            typeof(List<string>).GetMethod("Add"),
            Constant("efgh")
        )
    )
)
---- VBCompiler.CollectionTypeWithMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor(new Type[] { })
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string), typeof(string) }, null),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string), typeof(string) }, null),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- VBCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
Lambda(
    ListInit(
        New(
            typeof(Wrapper).GetConstructor(new Type[] { })
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string), typeof(string) }, null),
            Constant("ab"),
            Constant("cd")
        ),
        ElementInit(
            typeof(Wrapper).GetMethod("Add", BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string) }, null),
            Constant("ef")
        )
    )
)
---- VBCompiler.Conditional
var i = Parameter(
    typeof(int),
    "i"
);

Lambda(
    Condition(
        GreaterThan(i,
            Constant(10)
        ),
        i,
        AddChecked(i,
            Constant(10)
        )
    ),
    i
)
---- VBCompiler.ConstantNothingToObject
Lambda(
    Constant(null)
)
---- VBCompiler.ConstantNothingToReferenceType
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- VBCompiler.ConstantNothingToValueType
Lambda(
    Constant(0)
)
---- VBCompiler.Convert
var o = Parameter(
    typeof(object),
    "o"
);

Lambda(
    Convert(
        o,
        typeof(Random)
    )
)
---- VBCompiler.Divide
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Divide(
        x,
        y
    )
)
---- VBCompiler.Equal
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    Equal(
        i,
        j
    )
)
---- VBCompiler.EscapedString
Lambda(
    Constant("\"")
)
---- VBCompiler.ExclusiveOrBitwise
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    ExclusiveOr(
        i,
        j
    )
)
---- VBCompiler.ExclusiveOrLogical
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    ExclusiveOr(
        b1,
        b2
    )
)
---- VBCompiler.False
Lambda(
    Constant(false)
)
---- VBCompiler.GreaterThan
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    GreaterThan(
        i,
        j
    )
)
---- VBCompiler.GreaterThanOrEqual
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    GreaterThanOrEqual(
        i,
        j
    )
)
---- VBCompiler.InstanceMember
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    MakeMemberAccess(
        s,
        typeof(string).GetProperty("Length")
    )
)
---- VBCompiler.InstanceMethod0Arguments
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        s,
        typeof(string).GetMethod("ToString", new Type[] { })
    )
)
---- VBCompiler.InstanceMethod1Argument
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        s,
        typeof(string).GetMethod("CompareTo", new[] { typeof(string) }),
        Constant("")
    )
)
---- VBCompiler.InstanceMethod2Arguments
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        s,
        typeof(string).GetMethod("IndexOf", new[] { typeof(char), typeof(int) }),
        Constant('a'),
        Constant(2)
    )
)
---- VBCompiler.Integer
Lambda(
    Constant(5)
)
---- VBCompiler.InterpolatedString
Lambda(
    Call(
        typeof(string).GetMethod("Format", new[] { typeof(string), typeof(object) }),
        Constant("{0:yyyy-MM-dd}"),
        Convert(
            Constant(#DateTime),
            typeof(object)
        )
    )
)
---- VBCompiler.InvocationNoArguments
var del = Parameter(
    typeof(VB$AnonymousDelegate<int>),
    "del"
);

Lambda(
    Invoke(
        del
    )
)
---- VBCompiler.InvocationOneArgument
var del = Parameter(
    typeof(VB$AnonymousDelegate<int, int>),
    "del"
);

Lambda(
    Invoke(
        del,
        Constant(5)
    )
)
---- VBCompiler.JaggedWithBounds
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(5)
    )
)
---- VBCompiler.JaggedWithElementsExplicitType
Lambda(
    NewArrayInit(
        typeof(object[]),
        Convert(
            NewArrayInit(
                typeof(string),
                Constant("ab"),
                Constant("cd")
            ),
            typeof(object[])
        ),
        Convert(
            NewArrayInit(
                typeof(string),
                Constant("ef"),
                Constant("gh")
            ),
            typeof(object[])
        )
    )
)
---- VBCompiler.JaggedWithElementsImplicitType
Lambda(
    NewArrayInit(
        typeof(string[]),
        NewArrayInit(
            typeof(string),
            Constant("ab"),
            Constant("cd")
        ),
        NewArrayInit(
            typeof(string),
            Constant("ef"),
            Constant("gh")
        )
    )
)
---- VBCompiler.JaggedWithElementsImplicitTypeInnerNonLiteral
var arr1 = Parameter(
    typeof(string[]),
    "arr1"
);
var arr2 = Parameter(
    typeof(string[]),
    "arr2"
);

Lambda(
    NewArrayInit(
        typeof(string[]),
        arr1,
        arr2
    )
)
---- VBCompiler.LeftShift
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    LeftShift(
        i,
        And(
            j,
            Constant(31)
        )
    )
)
---- VBCompiler.LessThan
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    LessThan(
        i,
        j
    )
)
---- VBCompiler.LessThanOrEqual
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    LessThanOrEqual(
        i,
        j
    )
)
---- VBCompiler.LogicalNot
var b = Parameter(
    typeof(bool),
    "b"
);

Lambda(
    Not(
        b
    )
)
---- VBCompiler.Modulo
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Modulo(
        x,
        y
    )
)
---- VBCompiler.MultidimensionalArrayOfArray
Lambda(
    NewArrayBounds(
        typeof(string[]),
        Constant(3),
        Constant(2)
    )
)
---- VBCompiler.MultidimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(2),
        Constant(3)
    )
)
---- VBCompiler.Multiply
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Multiply(
        x,
        y
    )
)
---- VBCompiler.NamedType
Lambda(
    New(
        typeof(Random).GetConstructor(new Type[] { })
    )
)
---- VBCompiler.NamedTypeConstructorParameters
Lambda(
    New(
        typeof(Foo).GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string) }, null),
        Constant("ijkl")
    )
)
---- VBCompiler.NamedTypeConstructorParametersWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string) }, null),
            Constant("ijkl")
        ),
        Bind(
            typeof(Foo).GetProperty("Bar", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("efgh")
        )
    )
)
---- VBCompiler.NamedTypeWithInitializer
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, new Type[] { }, null)
        ),
        Bind(
            typeof(Foo).GetProperty("Bar", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("abcd")
        )
    )
)
---- VBCompiler.NamedTypeWithInitializers
Lambda(
    MemberInit(
        New(
            typeof(Foo).GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, new Type[] { }, null)
        ),
        Bind(
            typeof(Foo).GetProperty("Bar", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("abcd")
        ),
        Bind(
            typeof(Foo).GetProperty("Baz", BindingFlags.Instance | BindingFlags.NonPublic),
            Constant("efgh")
        )
    )
)
---- VBCompiler.Negate
var i = Parameter(
    typeof(int),
    "i"
);

Lambda(
    NegateChecked(
        i
    )
)
---- VBCompiler.NonInteger
Lambda(
    Constant(7.32)
)
---- VBCompiler.NoParametersNonVoidReturn
Lambda(
    Constant("abcd")
)
---- VBCompiler.NoParametersVoidReturn
Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new Type[] { })
    )
)
---- VBCompiler.NotEqual
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    NotEqual(
        i,
        j
    )
)
---- VBCompiler.Nothing
Lambda(
    Constant(null)
)
---- VBCompiler.NothingString
Lambda(
    Constant(null,
        typeof(string)
    )
)
---- VBCompiler.OneParameterNonVoidReturn
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(s, s)
---- VBCompiler.OneParameterVoidReturn
var s = Parameter(
    typeof(string),
    "s"
);

Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(string) }),
        s
    ),
    s
)
---- VBCompiler.OrBitwise
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    Or(
        i,
        j
    )
)
---- VBCompiler.OrElse
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    OrElse(
        b1,
        b2
    )
)
---- VBCompiler.OrLogical
var b1 = Parameter(
    typeof(bool),
    "b1"
);
var b2 = Parameter(
    typeof(bool),
    "b2"
);

Lambda(
    Or(
        b1,
        b2
    )
)
---- VBCompiler.Power
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Power(
        x,
        y
    )
)
---- VBCompiler.RightShift
var i = Parameter(
    typeof(int),
    "i"
);
var j = Parameter(
    typeof(int),
    "j"
);

Lambda(
    RightShift(
        i,
        And(
            j,
            Constant(31)
        )
    )
)
---- VBCompiler.SingleDimensionInit
Lambda(
    NewArrayInit(
        typeof(string),
        Constant("")
    )
)
---- VBCompiler.SingleDimensionInitExplicitType
Lambda(
    NewArrayInit(
        typeof(object),
        Convert(
            Constant(""),
            typeof(object)
        )
    )
)
---- VBCompiler.SingleDimensionWithBounds
Lambda(
    NewArrayBounds(
        typeof(string),
        Constant(5)
    )
)
---- VBCompiler.StaticMember
Lambda(
    MakeMemberAccess(null,
        typeof(string).GetField("Empty")
    )
)
---- VBCompiler.StaticMethod0Arguments
Lambda(
    Call(
        typeof(Dummy).GetMethod("DummyMethod")
    )
)
---- VBCompiler.StaticMethod1Argument
Lambda(
    Call(
        typeof(string).GetMethod("Intern"),
        Constant("")
    )
)
---- VBCompiler.StaticMethod2Arguments
var arr = Parameter(
    typeof(char[]),
    "arr"
);

Lambda(
    Call(
        typeof(string).GetMethod("Join", 0, new[] { typeof(string), typeof(string[]) }),
        Constant(","),
        NewArrayInit(
            typeof(string),
            New(
                typeof(string).GetConstructor(new[] { typeof(char[]) }),
                arr
            )
        )
    )
)
---- VBCompiler.StaticMethod2ArgumentsWithoutConversion
var arr = Parameter(
    typeof(IEnumerable<char>),
    "arr"
);

Lambda(
    Call(
        typeof(string).GetMethod("Join", 1, new[] { typeof(string), typeof(IEnumerable<char>) }),
        Constant(","),
        arr
    )
)
---- VBCompiler.String
Lambda(
    Constant("abcd")
)
---- VBCompiler.StringConcat
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) }),
        s1, s2
    ),
    s1, s2
)
---- VBCompiler.StringConcatOperator
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) }),
        s1, s2
    ),
    s1, s2
)
---- VBCompiler.StringConcatOperatorParamArray
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string[]) }),
        NewArrayInit(
            typeof(string),
            s1, s2, s1, s2, s1, s2
        )
    ),
    s1, s2
)
---- VBCompiler.Subtract
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Subtract(
        x,
        y
    )
)
---- VBCompiler.True
Lambda(
    Constant(true)
)
---- VBCompiler.TwoParametersNonVoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) }),
        s1, s2
    ),
    s1, s2
)
---- VBCompiler.TwoParametersVoidReturn
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(Console).GetMethod("WriteLine", new[] { typeof(string) }),
        Call(
            typeof(string).GetMethod("Concat", 0, new[] { typeof(string), typeof(string) }),
            s1, s2
        )
    ),
    s1, s2
)
---- VBCompiler.TypeAs
var o = Parameter(
    typeof(object),
    "o"
);

Lambda(
    TypeAs(
        o,
        typeof(string)
    )
)
---- VBCompiler.TypeCheck
Lambda(
    TypeIs(
        Constant(""),
        typeof(string)
    )
)
---- VBCompiler.TypeIndexer
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Property(
        lst,
        typeof(List<string>).GetProperty("Item"),
        Constant(3)
    )
)
---- VBCompiler.VBDeclaredTypeIndexer
var x = Parameter(
    typeof(DummyWithDefault),
    "x"
);

Lambda(
    Property(
        x,
        typeof(DummyWithDefault).GetProperty("Item"),
        Constant(5)
    )
)
---- VBCompiler.LeftEnumNonConstant
var dow = Parameter(
    typeof(DayOfWeek),
    "dow"
);

Lambda(
    GreaterThanOrEqual(
        ConvertChecked(
            dow,
            typeof(int)
        ),
        Constant(2)
    )
)
---- VBCompiler.RightEnumNonConstant
var dow = Parameter(
    typeof(DayOfWeek),
    "dow"
);

Lambda(
    LessThanOrEqual(
        Constant(2),
        ConvertChecked(
            dow,
            typeof(int)
        )
    )
)
---- VBCompiler.DualNonConstant
var dow1 = Parameter(
    typeof(DayOfWeek),
    "dow1"
);
var dow2 = Parameter(
    typeof(DayOfWeek),
    "dow2"
);

Lambda(
    Equal(
        ConvertChecked(
            dow1,
            typeof(int)
        ),
        ConvertChecked(
            dow2,
            typeof(int)
        )
    )
)
---- CSCompiler.LeftEnumNonConstant
var dow = Parameter(
    typeof(DayOfWeek),
    "dow"
);

Lambda(
    GreaterThanOrEqual(
        Convert(
            dow,
            typeof(int)
        ),
        Constant(2)
    )
)
---- CSCompiler.RightEnumNonConstant
var dow = Parameter(
    typeof(DayOfWeek),
    "dow"
);

Lambda(
    LessThanOrEqual(
        Constant(2),
        Convert(
            dow,
            typeof(int)
        )
    )
)
---- CSCompiler.DualNonConstant
var dow1 = Parameter(
    typeof(DayOfWeek),
    "dow1"
);
var dow2 = Parameter(
    typeof(DayOfWeek),
    "dow2"
);

Lambda(
    Equal(
        Convert(
            dow1,
            typeof(int)
        ),
        Convert(
            dow2,
            typeof(int)
        )
    )
)
---- VBCompiler.LikeOperatorStrings
var s1 = Parameter(
    typeof(string),
    "s1"
);
var s2 = Parameter(
    typeof(string),
    "s2"
);

Lambda(
    Call(
        typeof(LikeOperator).GetMethod("LikeString"),
        s1, s2,
        Constant(CompareMethod.Binary)
    ),
    s1, s2
)
---- VBCompiler.LikeOperatorObjects
var o1 = Parameter(
    typeof(object),
    "o1"
);
var o2 = Parameter(
    typeof(object),
    "o2"
);

Lambda(
    Call(
        typeof(LikeOperator).GetMethod("LikeObject"),
        o1, o2,
        Constant(CompareMethod.Binary)
    ),
    o1, o2
)
---- VBCompiler.ExtensionMethod1Argument
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod1Argument"),
        lst,
        Constant(1)
    )
)
---- VBCompiler.ExtensionMethod1ArgumentWithoutConversion
var lst = Parameter(
    typeof(IEnumerable<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod1ArgumentEnumerable"),
        lst,
        Constant(1)
    )
)
---- VBCompiler.ExtensionMethod2Arguments
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod2Arguments"),
        lst,
        Constant(5),
        Constant(17)
    )
)
---- VBCompiler.ExtensionMethod2ArgumentsWithoutConversion
var lst = Parameter(
    typeof(IEnumerable<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod2ArgumentsEnumerable"),
        lst,
        Constant(5),
        Constant(6)
    )
)
---- CSCompiler.ExtensionMethod1Argument
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod1Argument"),
        lst,
        Constant(1)
    )
)
---- CSCompiler.ExtensionMethod2Arguments
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod2Arguments"),
        lst,
        Constant(5),
        Constant(17)
    )
)
---- FactoryMethods.ExtensionMethod1Argument
Call(
    typeof(Dummy).GetMethod("ExtensionMethod1Argument"),
    lstString,
    Constant(1)
)
---- FactoryMethods.ExtensionMethod2Arguments
Call(
    typeof(Dummy).GetMethod("ExtensionMethod2Arguments"),
    lstString,
    Constant(5),
    Constant(17)
)
---- VBCompiler.ExtensionMethod0Arguments
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    MakeMemberAccess(
        lst,
        typeof(List<string>).GetProperty("Count")
    )
)
---- VBCompiler.ExtensionMethod0ArgumentsWithoutConversion
var lst = Parameter(
    typeof(IEnumerable<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Enumerable).GetMethod("Count", new[] { typeof(IEnumerable<string>) }),
        lst
    )
)
---- FactoryMethods.MakeExtensionExpression
--
-- Not implemented - NodeType: Exension not implemented.
--
---- FactoryMethods.ConstructUnbox
Unbox(obj,
    typeof(int)
)
---- CSCompiler.RequiredGenericParameters
Lambda(
    Call(
        typeof(Dummy).GetMethod("DummyMethodWithGenerics")
    )
)
---- FactoryMethods.NonVoidSwitch
Switch(i,
    Constant("Default"),
    SwitchCase(
        Constant("One"),
        Constant(1)
    ),
    SwitchCase(
        Constant("Two"),
        Constant(2)
    ),
    SwitchCase(
        Constant("Three"),
        Constant(3)
    )
)
---- FactoryMethods.NonVoidSwitchMultilineBodies
Switch(i,
    Block(
        Constant(null,
            typeof(string)
        ),
        Constant("Default")
    ),
    SwitchCase(
        Block(
            Constant(null,
                typeof(string)
            ),
            Constant("One")
        ),
        Constant(1)
    ),
    SwitchCase(
        Block(
            Constant(null,
                typeof(string)
            ),
            Constant("Two")
        ),
        Constant(2)
    )
)
---- FactoryMethods.NonVoidSwitchMultipleTestValues
Switch(i,
    Constant("Default"),
    SwitchCase(
        Constant("OneTwo"),
        Constant(1),
        Constant(2)
    ),
    SwitchCase(
        Constant("ThreeFour"),
        Constant(3),
        Constant(4)
    )
)
---- FactoryMethods.DynamicBinaryOperation
Dynamic(
    #CSharpBinaryOperationBinder,
    typeof(double), x, y
)
---- FactoryMethods.DynamicConvertOperation
Dynamic(
    #CSharpConvertBinder,
    typeof(int), x
)
---- FactoryMethods.DynamicUnaryOperation
Dynamic(
    #CSharpUnaryOperationBinder,
    typeof(bool), b1
)
---- FactoryMethods.UnnamedParameter
var $var0 = Parameter(
    typeof(string)
);

Lambda(
    MakeBinary(ExpressionType.Equal, $var0, $var0, false,
        typeof(string).GetMethod("op_Equality")
    ),
    $var0
)
---- FactoryMethods.WhitespaceNamedParameter
var $x_y = Parameter(
    typeof(string),
    "x y"
);

Lambda($x_y, $x_y)
---- VBCompiler.SingleDimensionWithBoundsExpression
var bounds = Parameter(
    typeof(int),
    "bounds"
);

Lambda(
    NewArrayBounds(
        typeof(string),
        AddChecked(
            bounds,
            Constant(1)
        )
    )
)
---- VBCompiler.MultidimensionWithBoundsExpression
var bound1 = Parameter(
    typeof(int),
    "bound1"
);
var bound2 = Parameter(
    typeof(int),
    "bound2"
);

Lambda(
    NewArrayBounds(
        typeof(string),
        AddChecked(
            bound1,
            Constant(1)
        ),
        AddChecked(
            bound2,
            Constant(1)
        )
    )
)
---- VBCompiler.JaggedWithBoundsExpression
var bound = Parameter(
    typeof(int),
    "bound"
);

Lambda(
    NewArrayBounds(
        typeof(string[]),
        AddChecked(
            bound,
            Constant(1)
        )
    )
)
---- VBCompiler.ExtensionMethod1ArgumentWithConversion
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod1ArgumentEnumerable"),
        Convert(
            lst,
            typeof(IEnumerable<string>)
        ),
        Constant(1)
    )
)
---- VBCompiler.ExtensionMethod2ArgumentsWithConversion
var lst = Parameter(
    typeof(List<string>),
    "lst"
);

Lambda(
    Call(
        typeof(Dummy).GetMethod("ExtensionMethod2ArgumentsEnumerable"),
        Convert(
            lst,
            typeof(IEnumerable<string>)
        ),
        Constant(5),
        Constant(6)
    )
)
---- VBCompiler.DivideIntegers
var x = Parameter(
    typeof(int),
    "x"
);
var y = Parameter(
    typeof(int),
    "y"
);

Lambda(
    Divide(
        Convert(
            x,
            typeof(double)
        ),
        Convert(
            y,
            typeof(double)
        )
    )
)
---- VBCompiler.DivideIntegral
var x = Parameter(
    typeof(double),
    "x"
);
var y = Parameter(
    typeof(double),
    "y"
);

Lambda(
    Divide(
        ConvertChecked(
            x,
            typeof(long),
            typeof(Convert).GetMethod("ToInt64", new[] { typeof(double) })
        ),
        ConvertChecked(
            y,
            typeof(long),
            typeof(Convert).GetMethod("ToInt64", new[] { typeof(double) })
        )
    )
)
---- CSCompiler.DivideIntegral
var x = Parameter(
    typeof(int),
    "x"
);
var y = Parameter(
    typeof(int),
    "y"
);

Lambda(
    Divide(
        x,
        y
    )
)
---- FactoryMethods.MakeEqualsEnum
Equal(
    ConvertChecked(
        Constant(DayOfWeek.Tuesday),
        typeof(int)
    ),
    ConvertChecked(
        Constant(DayOfWeek.Monday),
        typeof(int)
    )
)
------