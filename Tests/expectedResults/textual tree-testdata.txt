---- CSCompiler.Add
Lambda (Func<double>)
    · Body - Add (double) = 0
        · Left - MemberAccess (double) x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) y = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Divide
Lambda (Func<double>)
    · Body - Divide (double) = NaN
        · Left - MemberAccess (double) x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) y = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Modulo
Lambda (Func<double>)
    · Body - Modulo (double) = NaN
        · Left - MemberAccess (double) x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) y = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Multiply
Lambda (Func<double>)
    · Body - Multiply (double) = 0
        · Left - MemberAccess (double) x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) y = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Subtract
Lambda (Func<double>)
    · Body - Subtract (double) = 0
        · Left - MemberAccess (double) x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) y = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.AndBitwise
Lambda (Func<int>)
    · Body - And (int) = 0
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.OrBitwise
Lambda (Func<int>)
    · Body - Or (int) = 0
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.ExclusiveOrBitwise
Lambda (Func<int>)
    · Body - ExclusiveOr (int) = 0
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.AndLogical
Lambda (Func<bool>)
    · Body - And (bool) = true
        · Left - MemberAccess (bool) b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.OrLogical
Lambda (Func<bool>)
    · Body - Or (bool) = true
        · Left - MemberAccess (bool) b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.ExclusiveOrLogical
Lambda (Func<bool>)
    · Body - ExclusiveOr (bool) = false
        · Left - MemberAccess (bool) b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.AndAlso
Lambda (Func<bool>)
    · Body - AndAlso (bool) = true
        · Left - MemberAccess (bool) b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.OrElse
Lambda (Func<bool>)
    · Body - OrElse (bool) = true
        · Left - MemberAccess (bool) b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Equal
Lambda (Func<bool>)
    · Body - Equal (bool) = true
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.NotEqual
Lambda (Func<bool>)
    · Body - NotEqual (bool) = false
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.GreaterThanOrEqual
Lambda (Func<bool>)
    · Body - GreaterThanOrEqual (bool) = true
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.GreaterThan
Lambda (Func<bool>)
    · Body - GreaterThan (bool) = false
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.LessThan
Lambda (Func<bool>)
    · Body - LessThan (bool) = false
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.LessThanOrEqual
Lambda (Func<bool>)
    · Body - LessThanOrEqual (bool) = true
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Coalesce
Lambda (Func<string>)
    · Body - Coalesce (string)
        · Left - MemberAccess (string) s1
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (string) s2
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.LeftShift
Lambda (Func<int>)
    · Body - LeftShift (int) = 0
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.RightShift
Lambda (Func<int>)
    · Body - RightShift (int) = 0
        · Left - MemberAccess (int) i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) j = 0
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.ArrayIndex
Lambda (Func<string>)
    · Body - ArrayIndex (string) = "a"
        · Left - MemberAccess (string[]) arr = new[] { "a" }
            · Expression - Constant (<closure>) = #<closure>
        · Right - Constant (int) = 0
---- CSCompiler.DefaultRefType
Lambda (Func<string>)
    · Body - Constant (string)
---- CSCompiler.DefaultValueType
Lambda (Func<int>)
    · Body - Constant (int) = 0
---- CSCompiler.Conditional
Lambda (Func<int, int>)
    · Parameters[0] - Parameter (int) i
    · Body - Conditional (int)
        · Test - GreaterThan (bool)
            · Left - Parameter (int) i
            · Right - Constant (int) = 10
        · IfTrue - Parameter (int) i
        · IfFalse - Add (int)
            · Left - Parameter (int) i
            · Right - Constant (int) = 10
---- CSCompiler.TypeCheck
Lambda (Func<bool>)
    · Body - TypeIs (bool) = true
        · Expression - MemberAccess (object) o = ""
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.InvocationNoArguments
Lambda (Func<int>)
    · Body - Invoke (int) = 16
        · Expression - MemberAccess (Func<int>) del = #Func<int>
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.InvocationOneArgument
Lambda (Func<int>)
    · Body - Invoke (int) = 16
        · Arguments[0] - Constant (int) = 5
        · Expression - MemberAccess (Func<int, int>) del = #Func<int, int>
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.InstanceMember
Lambda (Func<int>)
    · Body - MemberAccess (int) Length = 0
        · Expression - MemberAccess (string) s = ""
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.ClosedVariable
Lambda (Func<string>)
    · Body - MemberAccess (string) s = ""
        · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.StaticMember
Lambda (Func<string>)
    · Body - MemberAccess (string) string.Empty = ""
---- CSCompiler.ArraySingleIndex
Lambda (Func<string>)
    · Body - ArrayIndex (string) = "5"
        · Left - MemberAccess (string[]) arr = new[] { "0", "1", "2", "3", "4", "5" }
            · Expression - Constant (<closure>) = #<closure>
        · Right - Constant (int) = 5
---- CSCompiler.ArrayMultipleIndex
Lambda (Func<string>)
    · Body - Call (string) Get = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
        · Object - MemberAccess (string[,]) arr = #string[,]
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (int) = 5
        · Arguments[1] - Constant (int) = 6
---- CSCompiler.TypeIndexer
Lambda (Func<string>)
    · Body - Call (string) get_Item = "4"
        · Object - MemberAccess (List<string>) lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (int) = 3
---- CSCompiler.NoParametersVoidReturn
Lambda (Action)
    · Body - Call (void) Console.WriteLine
---- CSCompiler.OneParameterVoidReturn
Lambda (Action<string>)
    · Parameters[0] - Parameter (string) s
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Parameter (string) s
---- CSCompiler.TwoParametersVoidReturn
Lambda (Action<string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Add (string)
            · Left - Parameter (string) s1
            · Right - Parameter (string) s2
---- CSCompiler.NoParametersNonVoidReturn
Lambda (Func<string>)
    · Body - Constant (string) = "abcd"
---- CSCompiler.OneParameterNonVoidReturn
Lambda (Func<string, string>)
    · Parameters[0] - Parameter (string) s
    · Body - Parameter (string) s
---- CSCompiler.TwoParametersNonVoidReturn
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Add (string)
        · Left - Parameter (string) s1
        · Right - Parameter (string) s2
---- CSCompiler.True
Lambda (Func<bool>)
    · Body - Constant (bool) = true
---- CSCompiler.False
Lambda (Func<bool>)
    · Body - Constant (bool) = false
---- CSCompiler.Nothing
Lambda (Func<string>)
    · Body - Constant (string)
---- CSCompiler.Integer
Lambda (Func<int>)
    · Body - Constant (int) = 5
---- CSCompiler.NonInteger
Lambda (Func<double>)
    · Body - Constant (double) = 7.32
---- CSCompiler.String
Lambda (Func<string>)
    · Body - Constant (string) = "abcd"
---- CSCompiler.InterpolatedString
Lambda (Func<string>)
    · Body - Call (string) string.Format = "25/03/2001 0:00:00"
        · Arguments[0] - Constant (string) = "{0}"
        · Arguments[1] - Convert (object) = 25/03/2001 0:00:00
            · Operand - New (DateTime) = 25/03/2001 0:00:00
                · Arguments[0] - Constant (int) = 2001
                · Arguments[1] - Constant (int) = 3
                · Arguments[2] - Constant (int) = 25
---- CSCompiler.Type
Lambda (Func<Type>)
    · Body - Constant (Type) = typeof(string)
---- CSCompiler.InstanceMethod0Arguments
Lambda (Func<string>)
    · Body - Call (string) ToString = ""
        · Object - MemberAccess (string) s = ""
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.StaticMethod0Arguments
Lambda (Action)
    · Body - Call (void) Dummy.DummyMethod
---- CSCompiler.ExtensionMethod0Arguments
Lambda (Func<int>)
    · Body - Call (int) Enumerable.Count = 0
        · Arguments[0] - MemberAccess (List<string>) lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.InstanceMethod1Argument
Lambda (Func<int>)
    · Body - Call (int) CompareTo = 0
        · Object - MemberAccess (string) s = ""
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (string) = ""
---- CSCompiler.StaticMethod1Argument
Lambda (Func<string>)
    · Body - Call (string) string.Intern = ""
        · Arguments[0] - Constant (string) = ""
---- CSCompiler.ExtensionMethod1Argument
Lambda (Func<IEnumerable<string>>)
    · Body - Call (IEnumerable<string>) Enumerable.Take = #ListPartition<string>
        · Arguments[0] - MemberAccess (List<string>) lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - Constant (int) = 1
---- CSCompiler.InstanceMethod2Arguments
Lambda (Func<int>)
    · Body - Call (int) IndexOf = -1
        · Object - MemberAccess (string) s = "abcde"
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (char) = 'a'
        · Arguments[1] - Constant (int) = 2
---- CSCompiler.StaticMethod2Arguments
Lambda (Func<string>)
    · Body - Call (string) string.Join = "a,b"
        · Arguments[0] - Constant (string) = ","
        · Arguments[1] - NewArrayInit (string[]) = new[] { "a", "b" }
            · Expressions[0] - Constant (string) = "a"
            · Expressions[1] - Constant (string) = "b"
---- CSCompiler.ExtensionMethod2Arguments
Lambda (Func<IOrderedEnumerable<string>>)
    · Body - Call (IOrderedEnumerable<string>) Enumerable.OrderBy
        · Arguments[0] - MemberAccess (List<string>) lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - Lambda (Func<string, string>)
            · Parameters[0] - Parameter (string) x
            · Body - Parameter (string) x
        · Arguments[2] - MemberAccess (StringComparer) StringComparer.OrdinalIgnoreCase = #OrdinalIgnoreCaseComparer
---- CSCompiler.StringConcat
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (string) string.Concat
        · Arguments[0] - Parameter (string) s1
        · Arguments[1] - Parameter (string) s2
---- CSCompiler.MathPow
Lambda (Func<double, double, double>)
    · Parameters[0] - Parameter (double) x
    · Parameters[1] - Parameter (double) y
    · Body - Call (double) Math.Pow
        · Arguments[0] - Parameter (double) x
        · Arguments[1] - Parameter (double) y
---- CSCompiler.SingleDimensionInit
Lambda (Func<string[]>)
    · Body - NewArrayInit (string[]) = new[] { "" }
        · Expressions[0] - Constant (string) = ""
---- CSCompiler.SingleDimensionInitExplicitType
Lambda (Func<object[]>)
    · Body - NewArrayInit (object[]) = new[] { "" }
        · Expressions[0] - Constant (string) = ""
---- CSCompiler.SingleDimensionWithBounds
Lambda (Func<string[]>)
    · Body - NewArrayBounds (string[]) = new[] { null, null, null, null, null }
        · Expressions[0] - Constant (int) = 5
---- CSCompiler.MultidimensionWithBounds
Lambda (Func<string[,]>)
    · Body - NewArrayBounds (string[,]) = #string[,]
        · Expressions[0] - Constant (int) = 2
        · Expressions[1] - Constant (int) = 3
---- CSCompiler.JaggedWithElementsImplicitType
Lambda (Func<string[][]>)
    · Body - NewArrayInit (string[][]) = #string[][]
        · Expressions[0] - NewArrayInit (string[]) = new[] { "ab", "cd" }
            · Expressions[0] - Constant (string) = "ab"
            · Expressions[1] - Constant (string) = "cd"
        · Expressions[1] - NewArrayInit (string[]) = new[] { "ef", "gh" }
            · Expressions[0] - Constant (string) = "ef"
            · Expressions[1] - Constant (string) = "gh"
---- CSCompiler.JaggedWithElementsExplicitType
Lambda (Func<object[][]>)
    · Body - NewArrayInit (object[][]) = #object[][]
        · Expressions[0] - NewArrayInit (string[]) = new[] { "ab", "cd" }
            · Expressions[0] - Constant (string) = "ab"
            · Expressions[1] - Constant (string) = "cd"
        · Expressions[1] - NewArrayInit (string[]) = new[] { "ef", "gh" }
            · Expressions[0] - Constant (string) = "ef"
            · Expressions[1] - Constant (string) = "gh"
---- CSCompiler.JaggedWithBounds
Lambda (Func<string[][]>)
    · Body - NewArrayBounds (string[][]) = #string[][]
        · Expressions[0] - Constant (int) = 5
---- CSCompiler.ArrayOfMultidimensionalArray
Lambda (Func<string[][,]>)
    · Body - NewArrayBounds (string[][,]) = #string[][,]
        · Expressions[0] - Constant (int) = 5
---- CSCompiler.MultidimensionalArrayOfArray
Lambda (Func<string[,][]>)
    · Body - NewArrayBounds (string[,][]) = #string[,][]
        · Expressions[0] - Constant (int) = 3
        · Expressions[1] - Constant (int) = 2
---- CSCompiler.NamedType
Lambda (Func<Random>)
    · Body - New (Random) = #Random
---- CSCompiler.NamedTypeWithInitializer
Lambda (Func<Foo>)
    · Body - MemberInit (Foo) = #Foo
        · NewExpression - New (Foo) = #Foo
        · Bindings[0] - Assignment Bar
            · Expression - Constant (string) = "abcd"
---- CSCompiler.NamedTypeWithInitializers
Lambda (Func<Foo>)
    · Body - MemberInit (Foo) = #Foo
        · NewExpression - New (Foo) = #Foo
        · Bindings[0] - Assignment Bar
            · Expression - Constant (string) = "abcd"
        · Bindings[1] - Assignment Baz
            · Expression - Constant (string) = "efgh"
---- CSCompiler.NamedTypeConstructorParameters
Lambda (Func<Foo>)
    · Body - New (Foo) = #Foo
        · Arguments[0] - Constant (string) = "ijkl"
---- CSCompiler.NamedTypeConstructorParametersWithInitializers
Lambda (Func<Foo>)
    · Body - MemberInit (Foo) = #Foo
        · NewExpression - New (Foo) = #Foo
            · Arguments[0] - Constant (string) = "ijkl"
        · Bindings[0] - Assignment Bar
            · Expression - Constant (string) = "abcd"
        · Bindings[1] - Assignment Baz
            · Expression - Constant (string) = "efgh"
---- CSCompiler.AnonymousType
Lambda (Func<{ string Bar, string Baz }>)
    · Body - New ({ string Bar, string Baz }) = { Bar = abcd, Baz = efgh }
        · Arguments[0] - Constant (string) = "abcd"
        · Arguments[1] - Constant (string) = "efgh"
---- CSCompiler.AnonymousTypeFromVariables
Lambda (Func<{ string Bar, string Baz }>)
    · Body - New ({ string Bar, string Baz }) = { Bar = abcd, Baz = efgh }
        · Arguments[0] - MemberAccess (string) Bar = "abcd"
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - MemberAccess (string) Baz = "efgh"
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.CollectionTypeWithInitializer
Lambda (Func<List<string>>)
    · Body - ListInit (List<string>) = #List<string>
        · NewExpression - New (List<string>) = #List<string>
        · Initializers[0] - ElementInit
            · Arguments[0] - Constant (string) = "abcd"
        · Initializers[1] - ElementInit
            · Arguments[0] - Constant (string) = "efgh"
---- CSCompiler.CollectionTypeWithMultipleElementsInitializers
Lambda (Func<Wrapper>)
    · Body - ListInit (Wrapper) = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
        · NewExpression - New (Wrapper) = #Wrapper
        · Initializers[0] - ElementInit
            · Arguments[0] - Constant (string) = "ab"
            · Arguments[1] - Constant (string) = "cd"
        · Initializers[1] - ElementInit
            · Arguments[0] - Constant (string) = "ef"
            · Arguments[1] - Constant (string) = "gh"
---- CSCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
Lambda (Func<Wrapper>)
    · Body - ListInit (Wrapper) = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
        · NewExpression - New (Wrapper) = #Wrapper
        · Initializers[0] - ElementInit
            · Arguments[0] - Constant (string) = "ab"
            · Arguments[1] - Constant (string) = "cd"
        · Initializers[1] - ElementInit
            · Arguments[0] - Constant (string) = "ef"
---- CSCompiler.MemberMemberBinding
Lambda (Func<Node>)
    · Body - MemberInit (Node) = #Node
        · NewExpression - New (Node) = #Node
        · Bindings[0] - MemberBinding Data
            · Bindings[0] - Assignment Name
                · Expression - Constant (string) = "abcd"
---- CSCompiler.ListBinding
Lambda (Func<Node>)
    · Body - MemberInit (Node) = #Node
        · NewExpression - New (Node) = #Node
        · Bindings[0] - ListBinding Children
            · Initializers[0] - ElementInit
                · Arguments[0] - New (Node) = #Node
            · Initializers[1] - ElementInit
                · Arguments[0] - New (Node) = #Node
---- CSCompiler.Negate
Lambda (Func<int>)
    · Body - Negate (int) = -1
        · Operand - MemberAccess (int) i = 1
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.BitwiseNot
Lambda (Func<int>)
    · Body - Not (int) = -2
        · Operand - MemberAccess (int) i = 1
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.LogicalNot
Lambda (Func<bool>)
    · Body - Not (bool) = false
        · Operand - MemberAccess (bool) b = true
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.TypeAs
Lambda (Func<string>)
    · Body - TypeAs (string)
        · Operand - MemberAccess (object) o
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.ArrayLength
Lambda (Func<int>)
    · Body - ArrayLength (int) = 0
        · Operand - MemberAccess (string[]) arr = new[] {  }
            · Expression - Constant (<closure>) = #<closure>
---- CSCompiler.Convert
Lambda (Func<object>)
    · Body - Convert (object) = #List<string>
        · Operand - MemberAccess (List<string>) lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
---- FactoryMethods.MakeArrayIndex
ArrayIndex (string)
    · Left - Parameter (string[]) arr
    · Right - Constant (int) = 0
---- FactoryMethods.MakeArrayMultipleIndex
Call (string) Get
    · Object - Parameter (string[,]) arr2d
    · Arguments[0] - Constant (int) = 0
    · Arguments[1] - Constant (int) = 1
---- FactoryMethods.MakeArrayAccess
Index (string)
    · Object - Parameter (string[]) arr
    · Arguments[0] - Constant (int) = 0
---- FactoryMethods.InstanceIndexer
Index (string)
    · Object - Parameter (List<string>) lstString
    · Arguments[0] - Constant (int) = 0
---- FactoryMethods.PropertyIndexer
Index (string)
    · Object - Parameter (List<string>) lstString
    · Arguments[0] - Constant (int) = 0
---- FactoryMethods.Random
Constant (Random) = #Random
---- FactoryMethods.ValueTuple
Constant (ValueTuple<string, int>) = ("abcd", 5)
---- FactoryMethods.OldTuple
Constant (Tuple<string, int>) = ("abcd", 5)
---- FactoryMethods.Array
Constant (object[]) = new[] { "abcd", 5, #Random }
---- FactoryMethods.Type
Constant (RuntimeType) = typeof(string)
---- FactoryMethods.DifferentTypeForNodeAndValue
Constant (IEnumerable) = #List<string>
---- FactoryMethods.MakeQuoted
Block (Expression<Action>)
    · Result - Quote (Expression<Action>)
        · Operand - Lambda (Action)
            · Body - Call (void) Console.WriteLine
                · Arguments[0] - Constant (bool) = true
    · Variables[0] - Parameter (double) x
    · Expressions[0] - Quote (Expression<Action>)
        · Operand - Lambda (Action)
            · Body - Call (void) Console.WriteLine
                · Arguments[0] - Constant (bool) = true
---- FactoryMethods.MakeQuoted1
Lambda (Func<Expression<Action>>)
    · Body - Quote (Expression<Action>)
        · Operand - Lambda (Action)
            · Body - Call (void) Console.WriteLine
                · Arguments[0] - Constant (bool) = true
---- FactoryMethods.MakeDebugInfo
DebugInfo (void)
---- FactoryMethods.MakeClearDebugInfo
DebugInfo (void)
---- FactoryMethods.EmptyLoop
Loop (void)
    · Body - Constant (bool) = true
---- FactoryMethods.EmptyLoop1
Loop (void)
    · Body - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
---- FactoryMethods.InstanceMember
MemberAccess (int) Length = 0
    · Expression - Constant (string) = ""
---- FactoryMethods.StaticMember
MemberAccess (string) string.Empty = ""
---- FactoryMethods.ConstructRuntimeVariables
RuntimeVariables (IRuntimeVariables)
    · Variables[0] - Parameter (double) x
    · Variables[1] - Parameter (string) s1
---- FactoryMethods.RuntimeVariablesWithinBlock
Block (IRuntimeVariables)
    · Result - RuntimeVariables (IRuntimeVariables)
        · Variables[0] - Parameter (double) x
        · Variables[1] - Parameter (string) s1
    · Variables[0] - Parameter (string) s2
    · Expressions[0] - Constant (bool) = true
    · Expressions[1] - RuntimeVariables (IRuntimeVariables)
        · Variables[0] - Parameter (double) x
        · Variables[1] - Parameter (string) s1
---- FactoryMethods.MakeDefaultRefType
Default (string)
---- FactoryMethods.MakeDefaultValueType
Default (int) = 0
---- FactoryMethods.MakeTypeCheck
TypeIs (bool) = true
    · Expression - Constant (string) = ""
---- FactoryMethods.MakeTypeEqual
TypeEqual (bool) = false
    · Expression - Constant (string) = ""
---- FactoryMethods.MakeInvocation
Invoke (int) = 5
    · Expression - Lambda (Func<int>)
        · Body - Constant (int) = 5
---- FactoryMethods.ConstructAdd
Add (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructAddChecked
AddChecked (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructDivide
Divide (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructModulo
Modulo (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructMultiply
Multiply (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructMultiplyChecked
MultiplyChecked (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructSubtract
Subtract (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructSubtractChecked
SubtractChecked (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructAndBitwise
And (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructOrBitwise
Or (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructExclusiveOrBitwise
ExclusiveOr (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructAndLogical
And (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructOrLogical
Or (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructExclusiveOrLogical
ExclusiveOr (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructAndAlso
AndAlso (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructOrElse
OrElse (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructEqual
Equal (bool)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructNotEqual
NotEqual (bool)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructReferenceEqual
Equal (bool)
    · Left - Parameter (List<string>) lstString
    · Right - Parameter (List<string>) lstString
---- FactoryMethods.ConstructReferenceNotEqual
NotEqual (bool)
    · Left - Parameter (List<string>) lstString
    · Right - Parameter (List<string>) lstString
---- FactoryMethods.ConstructGreaterThanOrEqual
GreaterThanOrEqual (bool)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructGreaterThan
GreaterThan (bool)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructLessThan
LessThan (bool)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructLessThanOrEqual
LessThanOrEqual (bool)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructCoalesce
Coalesce (string)
    · Left - Parameter (string) s1
    · Right - Parameter (string) s2
---- FactoryMethods.ConstructLeftShift
LeftShift (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructRightShift
RightShift (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructPower
Power (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructArrayIndex
ArrayIndex (string)
    · Left - Parameter (string[]) arr
    · Right - Parameter (int) i
---- FactoryMethods.ConstructAssign
Assign (double)
    · Left - Parameter (double) x
    · Right - Constant (double) = 5.2
---- FactoryMethods.ConstructAddAssign
AddAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructAddAssignChecked
AddAssignChecked (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructAndAssign
AndAssign (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructDivideAssign
DivideAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructExclusiveOrAssign
ExclusiveOrAssign (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructLeftShiftAssign
LeftShiftAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructModuloAssign
ModuloAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructMultiplyAssign
MultiplyAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructMultiplyAssignChecked
MultiplyAssignChecked (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructOrAssign
OrAssign (bool)
    · Left - Parameter (bool) b1
    · Right - Parameter (bool) b2
---- FactoryMethods.ConstructPowerAssign
PowerAssign (double)
    · Left - Parameter (double) x
    · Right - Parameter (double) y
---- FactoryMethods.ConstructRightShiftAssign
RightShiftAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructSubtractAssign
SubtractAssign (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.ConstructSubtractAssignChecked
SubtractAssignChecked (int)
    · Left - Parameter (int) i
    · Right - Parameter (int) j
---- FactoryMethods.BlockNoVariables
Block (bool)
    · Result - Constant (bool) = true
    · Expressions[0] - Constant (bool) = true
    · Expressions[1] - Constant (bool) = true
---- FactoryMethods.BlockSingleVariable
Block (bool)
    · Result - Constant (bool) = true
    · Variables[0] - Parameter (int) i
    · Expressions[0] - Constant (bool) = true
    · Expressions[1] - Constant (bool) = true
---- FactoryMethods.BlockMultipleVariable
Block (bool)
    · Result - Constant (bool) = true
    · Variables[0] - Parameter (int) i
    · Variables[1] - Parameter (string) s1
    · Expressions[0] - Constant (bool) = true
    · Expressions[1] - Constant (bool) = true
---- FactoryMethods.NestedInlineBlock
Block (bool)
    · Result - Constant (bool) = true
    · Expressions[0] - Constant (bool) = true
    · Expressions[1] - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
    · Expressions[2] - Constant (bool) = true
---- FactoryMethods.NestedBlockInTest
Conditional (void)
    · Test - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Block (bool)
            · Result - Constant (bool) = true
            · Expressions[0] - Constant (bool) = true
            · Expressions[1] - Constant (bool) = true
        · Expressions[2] - Constant (bool) = true
    · IfTrue - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.NestedBlockInBlockSyntax
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Block (bool)
            · Result - Constant (bool) = true
            · Expressions[0] - Constant (bool) = true
            · Expressions[1] - Constant (bool) = true
        · Expressions[2] - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.NestedInlineBlockWithVariable
Block (bool)
    · Result - Constant (bool) = true
    · Expressions[0] - Constant (bool) = true
    · Expressions[1] - Block (bool)
        · Result - Constant (bool) = true
        · Variables[0] - Parameter (string) s1
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
    · Expressions[2] - Constant (bool) = true
---- FactoryMethods.NestedBlockInTestWithVariables
Conditional (void)
    · Test - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Block (bool)
            · Result - Constant (bool) = true
            · Variables[0] - Parameter (string) s1
            · Expressions[0] - Constant (bool) = true
            · Expressions[1] - Constant (bool) = true
        · Expressions[2] - Constant (bool) = true
    · IfTrue - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.NestedBlockInBlockSyntaxWithVariable
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Block (bool)
            · Result - Constant (bool) = true
            · Variables[0] - Parameter (string) s1
            · Expressions[0] - Constant (bool) = true
            · Expressions[1] - Constant (bool) = true
        · Expressions[2] - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.VoidConditionalWithElse
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = false
---- FactoryMethods.VoidConditional1WithElse
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = false
---- FactoryMethods.VoidConditionalWithoutElse
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.VoidConditional1WithoutElse
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.NonVoidConditionalWithElse
Conditional (int) = 4
    · Test - Constant (bool) = true
    · IfTrue - MemberAccess (int) Length = 4
        · Expression - Constant (string) = "true"
    · IfFalse - MemberAccess (int) Length = 5
        · Expression - Constant (string) = "false"
---- FactoryMethods.NonVoidConditionalWithoutElse
Conditional (int) = 4
    · Test - Constant (bool) = true
    · IfTrue - MemberAccess (int) Length = 4
        · Expression - Constant (string) = "true"
    · IfFalse - Default (int) = 0
---- FactoryMethods.MultilineTestPart
Conditional (int) = 4
    · Test - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
    · IfTrue - MemberAccess (int) Length = 4
        · Expression - Constant (string) = "true"
    · IfFalse - MemberAccess (int) Length = 5
        · Expression - Constant (string) = "false"
---- FactoryMethods.MultilineTestPart1
Conditional (void)
    · Test - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.MultilineIfTrue
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
    · IfFalse - Default (void)
---- FactoryMethods.MultilineIfFalse
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
---- FactoryMethods.NestedIfThen
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Conditional (void)
        · Test - Constant (bool) = true
        · IfTrue - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · IfFalse - Default (void)
    · IfFalse - Default (void)
---- FactoryMethods.NestedElse
Conditional (void)
    · Test - Constant (bool) = true
    · IfTrue - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · IfFalse - Conditional (void)
        · Test - Constant (bool) = true
        · IfTrue - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · IfFalse - Default (void)
---- FactoryMethods.MakeConditional
Conditional (int)
    · Test - GreaterThan (bool)
        · Left - Parameter (int) i
        · Right - Constant (int) = 10
    · IfTrue - Parameter (int) i
    · IfFalse - Add (int)
        · Left - Parameter (int) i
        · Right - Constant (int) = 10
---- FactoryMethods.ConstructMemberInvocationNoArguments
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
---- FactoryMethods.ConstructMemberInvocationWithArguments
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (string) = "arg1"
    · Arguments[2] - Constant (int) = 15
---- FactoryMethods.ConstructSetIndex
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (int) = 42
    · Arguments[2] - Constant (string) = "key"
---- FactoryMethods.ConstructSetIndexMultipleKeys
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (int) = 42
    · Arguments[2] - Constant (string) = "key"
    · Arguments[3] - Constant (int) = 1
---- FactoryMethods.ConstructSetMember
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (int) = 42
---- FactoryMethods.ConstructGetIndex
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (string) = "key"
---- FactoryMethods.ConstructGetIndexMultipleKeys
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (string) = "key"
    · Arguments[2] - Constant (int) = 1
---- FactoryMethods.ConstructGetMember
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
---- FactoryMethods.ConstructInvocationNoArguments
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
---- FactoryMethods.ConstructInvocationWithArguments
Dynamic (object)
    · Arguments[0] - Parameter (object) obj
    · Arguments[1] - Constant (string) = "arg1"
    · Arguments[2] - Constant (int) = 15
---- FactoryMethods.MakeBreak
Goto (void)
    · Target - LabelTarget
---- FactoryMethods.MakeBreakWithValue
Goto (void)
    · Target - LabelTarget
    · Value - Constant (int) = 5
---- FactoryMethods.MakeContinue
Goto (void)
    · Target - LabelTarget
---- FactoryMethods.MakeGotoWithoutValue
Goto (void)
    · Target - LabelTarget
---- FactoryMethods.MakeGotoWithValue
Goto (void)
    · Target - LabelTarget
    · Value - Constant (int) = 5
---- FactoryMethods.MakeReturn
Goto (void)
    · Target - LabelTarget
---- FactoryMethods.MakeReturnWithValue
Goto (void)
    · Target - LabelTarget
    · Value - Constant (int) = 5
---- FactoryMethods.ConstructLabel
Block (bool)
    · Result - Block (bool)
        · Result - Constant (bool) = true
        · Variables[0] - Parameter (int) j
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Label (void)
            · Target - LabelTarget
        · Expressions[2] - Constant (bool) = true
    · Variables[0] - Parameter (int) i
    · Expressions[0] - Block (bool)
        · Result - Constant (bool) = true
        · Variables[0] - Parameter (int) j
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Label (void)
            · Target - LabelTarget
        · Expressions[2] - Constant (bool) = true
---- FactoryMethods.ConstructLabel1
Block (bool)
    · Result - Block (bool)
        · Result - Constant (bool) = true
        · Variables[0] - Parameter (int) j
        · Expressions[0] - Label (void)
            · Target - LabelTarget
        · Expressions[1] - Constant (bool) = true
    · Variables[0] - Parameter (int) i
    · Expressions[0] - Block (bool)
        · Result - Constant (bool) = true
        · Variables[0] - Parameter (int) j
        · Expressions[0] - Label (void)
            · Target - LabelTarget
        · Expressions[1] - Constant (bool) = true
---- FactoryMethods.ConstructLabelTarget
LabelTarget
---- FactoryMethods.ConstructEmptyLabelTarget
LabelTarget
---- FactoryMethods.NoParametersVoidReturn
Lambda (Action)
    · Body - Call (void) Console.WriteLine
---- FactoryMethods.OneParameterVoidReturn
Lambda (Action<string>)
    · Parameters[0] - Parameter (string) s
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Parameter (string) s
---- FactoryMethods.TwoParametersVoidReturn
Lambda (Action<string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Add (string)
            · Left - Parameter (string) s1
            · Right - Parameter (string) s2
---- FactoryMethods.NoParametersNonVoidReturn
Lambda (Func<string>)
    · Body - Constant (string) = "abcd"
---- FactoryMethods.OneParameterNonVoidReturn
Lambda (Func<string, string>)
    · Parameters[0] - Parameter (string) s
    · Body - Parameter (string) s
---- FactoryMethods.TwoParametersNonVoidReturn
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Add (string)
        · Left - Parameter (string) s1
        · Right - Parameter (string) s2
---- FactoryMethods.NamedLambda
Lambda (Func<string, string, string>) name
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Add (string)
        · Left - Parameter (string) s1
        · Right - Parameter (string) s2
---- FactoryMethods.MultilineLambda
Lambda (Action)
    · Body - Conditional (void)
        · Test - Constant (bool) = true
        · IfTrue - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · IfFalse - Default (void)
---- FactoryMethods.NestedLambda
Lambda (Func<Func<string, string, string>>)
    · Body - Lambda (Func<string, string, string>)
        · Parameters[0] - Parameter (string) s1
        · Parameters[1] - Parameter (string) s2
        · Body - Add (string)
            · Left - Parameter (string) s1
            · Right - Parameter (string) s2
---- FactoryMethods.LambdaMultilineBlockNonvoidReturn
Lambda (Func<bool>)
    · Body - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
---- FactoryMethods.LambdaMultilineNestedBlockNonvoidReturn
Lambda (Func<bool>)
    · Body - Block (bool)
        · Result - Block (bool)
            · Result - Constant (bool) = true
            · Variables[0] - Parameter (string) s1
            · Variables[1] - Parameter (string) s2
            · Expressions[0] - Constant (bool) = true
            · Expressions[1] - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Block (bool)
            · Result - Constant (bool) = true
            · Variables[0] - Parameter (string) s1
            · Variables[1] - Parameter (string) s2
            · Expressions[0] - Constant (bool) = true
            · Expressions[1] - Constant (bool) = true
---- FactoryMethods.MakeByRefParameter
Lambda (Delegate2$1)
    · Parameters[0] - Parameter (string) s4
    · Body - Constant (bool) = true
---- FactoryMethods.MakeMemberBind
Assignment Foo
    · Expression - Constant (string) = "abcd"
---- FactoryMethods.MakeElementInit
ElementInit
    · Arguments[0] - Constant (string) = "abcd"
---- FactoryMethods.MakeElementInit2Arguments
ElementInit
    · Arguments[0] - Constant (string) = "abcd"
    · Arguments[1] - Constant (string) = "efgh"
---- FactoryMethods.MakeMemberMemberBind
MemberBinding Data
    · Bindings[0] - Assignment Name
        · Expression - Constant (string) = "abcd"
---- FactoryMethods.MakeListBinding
ListBinding Children
    · Initializers[0] - ElementInit
        · Arguments[0] - New (Node) = #Node
    · Initializers[1] - ElementInit
        · Arguments[0] - New (Node) = #Node
---- FactoryMethods.InstanceMethod0Arguments
Call (string) ToString
    · Object - Parameter (string) s
---- FactoryMethods.StaticMethod0Arguments
Call (void) Dummy.DummyMethod
---- FactoryMethods.ExtensionMethod0Arguments
Call (int) Enumerable.Count
    · Arguments[0] - Parameter (List<string>) lstString
---- FactoryMethods.InstanceMethod1Argument
Call (int) CompareTo
    · Object - Parameter (string) s
    · Arguments[0] - Constant (string) = ""
---- FactoryMethods.StaticMethod1Argument
Call (string) string.Intern = ""
    · Arguments[0] - Constant (string) = ""
---- FactoryMethods.ExtensionMethod1Argument
Call (IEnumerable<string>) Enumerable.Take
    · Arguments[0] - Parameter (List<string>) lstString
    · Arguments[1] - Constant (int) = 1
---- FactoryMethods.InstanceMethod2Arguments
Call (int) IndexOf
    · Object - Parameter (string) s
    · Arguments[0] - Constant (char) = 'a'
    · Arguments[1] - Constant (int) = 2
---- FactoryMethods.StaticMethod2Arguments
Call (string) string.Join = "a,b"
    · Arguments[0] - Constant (string) = ","
    · Arguments[1] - NewArrayInit (string[]) = new[] { "a", "b" }
        · Expressions[0] - Constant (string) = "a"
        · Expressions[1] - Constant (string) = "b"
---- FactoryMethods.ExtensionMethod2Arguments
Call (IOrderedEnumerable<string>) Enumerable.OrderBy
    · Arguments[0] - Parameter (List<string>) lstString
    · Arguments[1] - Lambda (Func<string, string>)
        · Parameters[0] - Parameter (string) x
        · Body - Parameter (string) x
    · Arguments[2] - MemberAccess (StringComparer) StringComparer.OrdinalIgnoreCase = #OrdinalIgnoreCaseComparer
---- FactoryMethods.StringConcat
Call (string) string.Concat
    · Arguments[0] - Parameter (string) s1
    · Arguments[1] - Parameter (string) s2
---- FactoryMethods.NamedType
New (Random) = #Random
---- FactoryMethods.NamedTypeWithInitializer
MemberInit (Foo) = #Foo
    · NewExpression - New (Foo) = #Foo
    · Bindings[0] - Assignment Bar
        · Expression - Constant (string) = "abcd"
---- FactoryMethods.NamedTypeWithInitializers
MemberInit (Foo) = #Foo
    · NewExpression - New (Foo) = #Foo
    · Bindings[0] - Assignment Bar
        · Expression - Constant (string) = "abcd"
    · Bindings[1] - Assignment Baz
        · Expression - Constant (string) = "efgh"
---- FactoryMethods.NamedTypeConstructorParameters
New (Foo) = #Foo
    · Arguments[0] - Constant (string) = "ijkl"
---- FactoryMethods.NamedTypeConstructorParametersWithInitializers
MemberInit (Foo) = #Foo
    · NewExpression - New (Foo) = #Foo
        · Arguments[0] - Constant (string) = "ijkl"
    · Bindings[0] - Assignment Bar
        · Expression - Constant (string) = "abcd"
    · Bindings[1] - Assignment Baz
        · Expression - Constant (string) = "efgh"
---- FactoryMethods.CollectionTypeWithInitializer
ListInit (List<string>) = #List<string>
    · NewExpression - New (List<string>) = #List<string>
    · Initializers[0] - ElementInit
        · Arguments[0] - Constant (string) = "abcd"
    · Initializers[1] - ElementInit
        · Arguments[0] - Constant (string) = "efgh"
---- FactoryMethods.CollectionTypeWithMultiElementInitializers
ListInit (Wrapper) = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
    · NewExpression - New (Wrapper) = #Wrapper
    · Initializers[0] - ElementInit
        · Arguments[0] - Constant (string) = "ab"
        · Arguments[1] - Constant (string) = "cd"
    · Initializers[1] - ElementInit
        · Arguments[0] - Constant (string) = "ef"
        · Arguments[1] - Constant (string) = "gh"
---- FactoryMethods.CollectionTypeWithSingleOrMultiElementInitializers
ListInit (Wrapper) = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
    · NewExpression - New (Wrapper) = #Wrapper
    · Initializers[0] - ElementInit
        · Arguments[0] - Constant (string) = "ab"
        · Arguments[1] - Constant (string) = "cd"
    · Initializers[1] - ElementInit
        · Arguments[0] - Constant (string) = "ef"
---- FactoryMethods.SingleDimensionInit
NewArrayInit (string[]) = new[] { "" }
    · Expressions[0] - Constant (string) = ""
---- FactoryMethods.SingleDimensionInitExplicitType
NewArrayInit (object[]) = new[] { "" }
    · Expressions[0] - Constant (string) = ""
---- FactoryMethods.SingleDimensionWithBounds
NewArrayBounds (string[]) = new[] { null, null, null, null, null }
    · Expressions[0] - Constant (int) = 5
---- FactoryMethods.MultidimensionWithBounds
NewArrayBounds (string[,]) = #string[,]
    · Expressions[0] - Constant (int) = 2
    · Expressions[1] - Constant (int) = 3
---- FactoryMethods.JaggedWithElementsImplicitType
NewArrayInit (string[][]) = #string[][]
    · Expressions[0] - NewArrayInit (string[]) = new[] { "ab", "cd" }
        · Expressions[0] - Constant (string) = "ab"
        · Expressions[1] - Constant (string) = "cd"
    · Expressions[1] - NewArrayInit (string[]) = new[] { "ef", "gh" }
        · Expressions[0] - Constant (string) = "ef"
        · Expressions[1] - Constant (string) = "gh"
---- FactoryMethods.JaggedWithElementsExplicitType
NewArrayInit (object[][]) = #object[][]
    · Expressions[0] - NewArrayInit (string[]) = new[] { "ab", "cd" }
        · Expressions[0] - Constant (string) = "ab"
        · Expressions[1] - Constant (string) = "cd"
    · Expressions[1] - NewArrayInit (string[]) = new[] { "ef", "gh" }
        · Expressions[0] - Constant (string) = "ef"
        · Expressions[1] - Constant (string) = "gh"
---- FactoryMethods.JaggedWithBounds
NewArrayBounds (string[][]) = #string[][]
    · Expressions[0] - Constant (int) = 5
---- FactoryMethods.ArrayOfMultidimensionalArray
NewArrayBounds (string[][,]) = #string[][,]
    · Expressions[0] - Constant (int) = 5
---- FactoryMethods.MultidimensionalArrayOfArray
NewArrayBounds (string[,][]) = #string[,][]
    · Expressions[0] - Constant (int) = 3
    · Expressions[1] - Constant (int) = 2
---- FactoryMethods.SingleValueSwitchCase
SwitchCase
    · TestValues[0] - Constant (int) = 5
    · Body - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
---- FactoryMethods.MultiValueSwitchCase
SwitchCase
    · TestValues[0] - Constant (int) = 5
    · TestValues[1] - Constant (int) = 6
    · Body - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
---- FactoryMethods.SingleValueSwitchCase1
SwitchCase
    · TestValues[0] - Constant (int) = 5
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.MultiValueSwitchCase1
SwitchCase
    · TestValues[0] - Constant (int) = 5
    · TestValues[1] - Constant (int) = 6
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.SwitchOnExpressionWithDefaultSingleStatement
Switch (void)
    · SwitchValue - Parameter (int) i
    · Cases[0] - SwitchCase
        · TestValues[0] - Constant (int) = 4
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
    · Cases[1] - SwitchCase
        · TestValues[0] - Constant (int) = 5
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
    · DefaultBody - Default (void)
---- FactoryMethods.SwitchOnExpressionWithDefaultMultiStatement
Switch (void)
    · SwitchValue - Parameter (int) i
    · Cases[0] - SwitchCase
        · TestValues[0] - Constant (int) = 4
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
    · Cases[1] - SwitchCase
        · TestValues[0] - Constant (int) = 5
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
    · DefaultBody - Block (void)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
---- FactoryMethods.SwitchOnMultipleStatementsWithDefault
Switch (void)
    · SwitchValue - Block (int)
        · Result - Parameter (int) j
        · Expressions[0] - Parameter (int) i
        · Expressions[1] - Parameter (int) j
    · Cases[0] - SwitchCase
        · TestValues[0] - Constant (int) = 4
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
    · Cases[1] - SwitchCase
        · TestValues[0] - Constant (int) = 5
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
    · DefaultBody - Block (void)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
---- FactoryMethods.SwitchOnExpressionWithoutDefault
Switch (void)
    · SwitchValue - Parameter (int) i
    · Cases[0] - SwitchCase
        · TestValues[0] - Constant (int) = 4
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
    · Cases[1] - SwitchCase
        · TestValues[0] - Constant (int) = 5
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
---- FactoryMethods.SwitchOnMultipleStatementsWithoutDefault
Switch (void)
    · SwitchValue - Block (int)
        · Result - Parameter (int) j
        · Expressions[0] - Parameter (int) i
        · Expressions[1] - Parameter (int) j
    · Cases[0] - SwitchCase
        · TestValues[0] - Constant (int) = 4
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
    · Cases[1] - SwitchCase
        · TestValues[0] - Constant (int) = 5
        · Body - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = false
---- FactoryMethods.ConstructTryFault
Try (void)
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · Fault - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructTryFinally
Try (void)
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
    · Finally - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructSimpleCatch
CatchBlock
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchSingleStatement
CatchBlock
    · Variable - Parameter (Exception) ex
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchMultiStatement
CatchBlock
    · Variable - Parameter (Exception) ex
    · Body - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchSingleStatementWithType
CatchBlock
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchMultiStatementWithType
CatchBlock
    · Body - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchSingleStatementWithFilter
CatchBlock
    · Variable - Parameter (Exception) ex
    · Filter - Constant (bool) = true
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchMultiStatementWithFilter
CatchBlock
    · Variable - Parameter (Exception) ex
    · Filter - Constant (bool) = true
    · Body - Block (void)
        · Result - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[0] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
        · Expressions[1] - Call (void) Console.WriteLine
            · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructCatchWithMultiStatementFilter
CatchBlock
    · Variable - Parameter (Exception) ex
    · Filter - Block (bool)
        · Result - Constant (bool) = true
        · Expressions[0] - Constant (bool) = true
        · Expressions[1] - Constant (bool) = true
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructTryCatch
Try (bool) = true
    · Body - Constant (bool) = true
    · Handlers[0] - CatchBlock
        · Body - Constant (bool) = true
---- FactoryMethods.ConstructTryCatchFinally
Try (bool)
    · Body - Constant (bool) = true
    · Handlers[0] - CatchBlock
        · Variable - Parameter (Exception) ex
        · Body - Constant (bool) = true
    · Finally - Call (void) Console.WriteLine
        · Arguments[0] - Constant (bool) = true
---- FactoryMethods.ConstructArrayLength
ArrayLength (int)
    · Operand - Parameter (string[]) arr
---- FactoryMethods.ConstructConvert
Convert (object)
    · Operand - Parameter (string[]) arr
---- FactoryMethods.ConstructConvertChecked
ConvertChecked (float) = 5
    · Operand - Constant (int) = 5
---- FactoryMethods.ConstructConvertCheckedForReferenceType
Convert (object)
    · Operand - Parameter (string[]) arr
---- FactoryMethods.ConstructNegate
Negate (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructBitwiseNot
Not (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructLogicalNot
Not (bool)
    · Operand - Parameter (bool) b1
---- FactoryMethods.ConstructTypeAs
TypeAs (object)
    · Operand - Parameter (string[]) arr
---- FactoryMethods.ConstructPostDecrementAssign
PostDecrementAssign (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructPostIncrementAssign
PostIncrementAssign (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructPreDecrementAssign
PreDecrementAssign (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructPreIncrementAssign
PreIncrementAssign (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructIsTrue
IsTrue (bool)
    · Operand - Parameter (bool) b1
---- FactoryMethods.ConstructIsFalse
IsFalse (bool)
    · Operand - Parameter (bool) b1
---- FactoryMethods.ConstructIncrement
Increment (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructDecrement
Decrement (int)
    · Operand - Parameter (int) i
---- FactoryMethods.ConstructThrow
Throw (void)
    · Operand - Constant (Random) = #Random
---- FactoryMethods.ConstructRethrow
Throw (void)
---- VBCompiler.Add
Lambda (Func<double>)
    · Body - Add (double) = 0
        · Left - MemberAccess (double) $VB$Local_x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) $VB$Local_y = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Divide
Lambda (Func<double>)
    · Body - Divide (double) = NaN
        · Left - MemberAccess (double) $VB$Local_x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) $VB$Local_y = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Modulo
Lambda (Func<double>)
    · Body - Modulo (double) = NaN
        · Left - MemberAccess (double) $VB$Local_x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) $VB$Local_y = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Multiply
Lambda (Func<double>)
    · Body - Multiply (double) = 0
        · Left - MemberAccess (double) $VB$Local_x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) $VB$Local_y = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Subtract
Lambda (Func<double>)
    · Body - Subtract (double) = 0
        · Left - MemberAccess (double) $VB$Local_x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) $VB$Local_y = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.AndBitwise
Lambda (Func<int>)
    · Body - And (int) = 0
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.OrBitwise
Lambda (Func<int>)
    · Body - Or (int) = 0
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.ExclusiveOrBitwise
Lambda (Func<int>)
    · Body - ExclusiveOr (int) = 0
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.AndLogical
Lambda (Func<bool>)
    · Body - And (bool) = true
        · Left - MemberAccess (bool) $VB$Local_b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) $VB$Local_b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.OrLogical
Lambda (Func<bool>)
    · Body - Or (bool) = true
        · Left - MemberAccess (bool) $VB$Local_b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) $VB$Local_b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.ExclusiveOrLogical
Lambda (Func<bool>)
    · Body - ExclusiveOr (bool) = false
        · Left - MemberAccess (bool) $VB$Local_b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) $VB$Local_b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.AndAlso
Lambda (Func<bool>)
    · Body - AndAlso (bool) = true
        · Left - MemberAccess (bool) $VB$Local_b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) $VB$Local_b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.OrElse
Lambda (Func<bool>)
    · Body - OrElse (bool) = true
        · Left - MemberAccess (bool) $VB$Local_b1 = true
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (bool) $VB$Local_b2 = true
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Equal
Lambda (Func<bool>)
    · Body - Equal (bool) = true
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.NotEqual
Lambda (Func<bool>)
    · Body - NotEqual (bool) = false
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.GreaterThanOrEqual
Lambda (Func<bool>)
    · Body - GreaterThanOrEqual (bool) = true
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.GreaterThan
Lambda (Func<bool>)
    · Body - GreaterThan (bool) = false
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.LessThan
Lambda (Func<bool>)
    · Body - LessThan (bool) = false
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.LessThanOrEqual
Lambda (Func<bool>)
    · Body - LessThanOrEqual (bool) = true
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (int) $VB$Local_j = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Coalesce
Lambda (Func<string>)
    · Body - Coalesce (string)
        · Left - MemberAccess (string) $VB$Local_s1
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (string) $VB$Local_s2
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.LeftShift
Lambda (Func<int>)
    · Body - LeftShift (int) = 0
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - And (int) = 0
            · Left - MemberAccess (int) $VB$Local_j = 0
                · Expression - Constant (<closure>) = #<closure>
            · Right - Constant (int) = 31
---- VBCompiler.RightShift
Lambda (Func<int>)
    · Body - RightShift (int) = 0
        · Left - MemberAccess (int) $VB$Local_i = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - And (int) = 0
            · Left - MemberAccess (int) $VB$Local_j = 0
                · Expression - Constant (<closure>) = #<closure>
            · Right - Constant (int) = 31
---- VBCompiler.ArrayIndex
Lambda (Func<string>)
    · Body - ArrayIndex (string) = "17"
        · Left - MemberAccess (string[]) $VB$Local_arr = new[] { "17" }
            · Expression - Constant (<closure>) = #<closure>
        · Right - Constant (int) = 0
---- VBCompiler.Power
Lambda (Func<double>)
    · Body - Power (double) = 1
        · Left - MemberAccess (double) $VB$Local_x = 0
            · Expression - Constant (<closure>) = #<closure>
        · Right - MemberAccess (double) $VB$Local_y = 0
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.ArraySingleIndex
Lambda (Func<string>)
    · Body - ArrayIndex (string) = "6"
        · Left - MemberAccess (string[]) $VB$Local_arr = new[] { "1", "2", "3", "4", "5", "6" }
            · Expression - Constant (<closure>) = #<closure>
        · Right - Constant (int) = 5
---- VBCompiler.ArrayMultipleIndex
Lambda (Func<string>)
    · Body - Call (string) Get = "57"
        · Object - MemberAccess (string[,]) $VB$Local_arr = #string[,]
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (int) = 5
        · Arguments[1] - Constant (int) = 6
---- VBCompiler.InterpolatedString
Lambda (Func<string>)
    · Body - Call (string) string.Format = "25/03/2001 0:00:00"
        · Arguments[0] - Constant (string) = "{0}"
        · Arguments[1] - Convert (object) = 25/03/2001 0:00:00
            · Operand - Constant (DateTime) = 25/03/2001 0:00:00
---- VBCompiler.TypeIndexer
Lambda (Func<string>)
    · Body - Call (string) get_Item = "4"
        · Object - MemberAccess (List<string>) $VB$Local_lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (int) = 3
---- VBCompiler.VBDeclaredTypeIndexer
Lambda (Func<int>)
    · Body - Call (int) get_Item = 0
        · Object - MemberAccess (DummyWithDefault) $VB$Local_x = #DummyWithDefault
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (int) = 5
---- VBCompiler.NoParametersVoidReturn
Lambda (Action)
    · Body - Call (void) Console.WriteLine
---- VBCompiler.OneParameterVoidReturn
Lambda (Action<string>)
    · Parameters[0] - Parameter (string) s
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Parameter (string) s
---- VBCompiler.TwoParametersVoidReturn
Lambda (Action<string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (void) Console.WriteLine
        · Arguments[0] - Call (string) string.Concat
            · Arguments[0] - Parameter (string) s1
            · Arguments[1] - Parameter (string) s2
---- VBCompiler.NoParametersNonVoidReturn
Lambda (Func<string>)
    · Body - Constant (string) = "abcd"
---- VBCompiler.OneParameterNonVoidReturn
Lambda (Func<string, string>)
    · Parameters[0] - Parameter (string) s
    · Body - Parameter (string) s
---- VBCompiler.TwoParametersNonVoidReturn
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (string) string.Concat
        · Arguments[0] - Parameter (string) s1
        · Arguments[1] - Parameter (string) s2
---- VBCompiler.True
Lambda (Func<bool>)
    · Body - Constant (bool) = true
---- VBCompiler.False
Lambda (Func<bool>)
    · Body - Constant (bool) = false
---- VBCompiler.NothingString
Lambda (Func<string>)
    · Body - Constant (string)
---- VBCompiler.Nothing
Lambda (Func<object>)
    · Body - Constant (object)
---- VBCompiler.Integer
Lambda (Func<int>)
    · Body - Constant (int) = 5
---- VBCompiler.NonInteger
Lambda (Func<double>)
    · Body - Constant (double) = 7.32
---- VBCompiler.String
Lambda (Func<string>)
    · Body - Constant (string) = "abcd"
---- VBCompiler.EscapedString
Lambda (Func<string>)
    · Body - Constant (string) = "\""
---- VBCompiler.ConstantNothingToObject
Lambda (Func<object>)
    · Body - Constant (object)
---- VBCompiler.ConstantNothingToReferenceType
Lambda (Func<string>)
    · Body - Constant (string)
---- VBCompiler.ConstantNothingToValueType
Lambda (Func<int>)
    · Body - Constant (int) = 0
---- VBCompiler.InstanceMember
Lambda (Func<int>)
    · Body - MemberAccess (int) Length = 0
        · Expression - MemberAccess (string) $VB$Local_s = ""
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.ClosedVariable
Lambda (Func<string>)
    · Body - MemberAccess (string) $VB$Local_s = ""
        · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.StaticMember
Lambda (Func<string>)
    · Body - MemberAccess (string) string.Empty = ""
---- VBCompiler.InstanceMethod0Arguments
Lambda (Func<string>)
    · Body - Call (string) ToString = ""
        · Object - MemberAccess (string) $VB$Local_s = ""
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.StaticMethod0Arguments
Lambda (Action)
    · Body - Call (void) Dummy.DummyMethod
---- VBCompiler.ExtensionMethod0Arguments
Lambda (Func<IEnumerable<string>>)
    · Body - Call (IEnumerable<string>) Enumerable.Distinct = #DistinctIterator<string>
        · Arguments[0] - Convert (IEnumerable<string>) = #List<string>
            · Operand - MemberAccess (List<string>) $VB$Local_lst = #List<string>
                · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.ExtensionMethod0ArgumentsWithoutConversion
Lambda (Func<IEnumerable<string>>)
    · Body - Call (IEnumerable<string>) Enumerable.Distinct = #DistinctIterator<string>
        · Arguments[0] - MemberAccess (IEnumerable<string>) $VB$Local_lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.InstanceMethod1Argument
Lambda (Func<int>)
    · Body - Call (int) CompareTo = 0
        · Object - MemberAccess (string) $VB$Local_s = ""
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (string) = ""
---- VBCompiler.StaticMethod1Argument
Lambda (Func<string>)
    · Body - Call (string) string.Intern = ""
        · Arguments[0] - Constant (string) = ""
---- VBCompiler.ExtensionMethod1Argument
Lambda (Func<IEnumerable<string>>)
    · Body - Call (IEnumerable<string>) Enumerable.Take = #ListPartition<string>
        · Arguments[0] - Convert (IEnumerable<string>) = #List<string>
            · Operand - MemberAccess (List<string>) $VB$Local_lst = #List<string>
                · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - Constant (int) = 1
---- VBCompiler.ExtensionMethod1ArgumentWithoutConversion
Lambda (Func<IEnumerable<string>>)
    · Body - Call (IEnumerable<string>) Enumerable.Take = #ListPartition<string>
        · Arguments[0] - MemberAccess (IEnumerable<string>) $VB$Local_lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - Constant (int) = 1
---- VBCompiler.InstanceMethod2Arguments
Lambda (Func<int>)
    · Body - Call (int) IndexOf = -1
        · Object - MemberAccess (string) $VB$Local_s = "abcde"
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[0] - Constant (char) = 'a'
        · Arguments[1] - Constant (int) = 2
---- VBCompiler.StaticMethod2Arguments
Lambda (Func<string>)
    · Body - Call (string) string.Join = "ab"
        · Arguments[0] - Constant (string) = ","
        · Arguments[1] - NewArrayInit (string[]) = new[] { "ab" }
            · Expressions[0] - New (string) = "ab"
                · Arguments[0] - MemberAccess (char[]) $VB$Local_arr = new[] { 'a', 'b' }
                    · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.StaticMethod2ArgumentsWithoutConversion
Lambda (Func<string>)
    · Body - Call (string) string.Join = "a,b"
        · Arguments[0] - Constant (string) = ","
        · Arguments[1] - MemberAccess (IEnumerable<char>) $VB$Local_arr = new[] { 'a', 'b' }
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.ExtensionMethod2Arguments
Lambda (Func<IOrderedEnumerable<string>>)
    · Body - Call (IOrderedEnumerable<string>) Enumerable.OrderBy
        · Arguments[0] - Convert (IEnumerable<string>) = #List<string>
            · Operand - MemberAccess (List<string>) $VB$Local_lst = #List<string>
                · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - Lambda (Func<string, string>)
            · Parameters[0] - Parameter (string) x
            · Body - Parameter (string) x
        · Arguments[2] - Convert (IComparer<string>) = #OrdinalIgnoreCaseComparer
            · Operand - MemberAccess (StringComparer) StringComparer.OrdinalIgnoreCase = #OrdinalIgnoreCaseComparer
---- VBCompiler.ExtensionMethod2ArgumentsWithoutConversion
Lambda (Func<IOrderedEnumerable<string>>)
    · Body - Call (IOrderedEnumerable<string>) Enumerable.OrderBy
        · Arguments[0] - MemberAccess (IEnumerable<string>) $VB$Local_lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - Lambda (Func<string, string>)
            · Parameters[0] - Parameter (string) x
            · Body - Parameter (string) x
        · Arguments[2] - MemberAccess (IComparer<string>) $VB$Local_comparer = #OrdinalIgnoreCaseComparer
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.StringConcat
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (string) string.Concat
        · Arguments[0] - Parameter (string) s1
        · Arguments[1] - Parameter (string) s2
---- VBCompiler.StringConcatOperator
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (string) string.Concat
        · Arguments[0] - Parameter (string) s1
        · Arguments[1] - Parameter (string) s2
---- VBCompiler.StringConcatOperatorParamArray
Lambda (Func<string, string, string>)
    · Parameters[0] - Parameter (string) s1
    · Parameters[1] - Parameter (string) s2
    · Body - Call (string) string.Concat
        · Arguments[0] - NewArrayInit (string[])
            · Expressions[0] - Parameter (string) s1
            · Expressions[1] - Parameter (string) s2
            · Expressions[2] - Parameter (string) s1
            · Expressions[3] - Parameter (string) s2
            · Expressions[4] - Parameter (string) s1
            · Expressions[5] - Parameter (string) s2
---- VBCompiler.NamedType
Lambda (Func<Random>)
    · Body - New (Random) = #Random
---- VBCompiler.NamedTypeWithInitializer
Lambda (Func<Foo>)
    · Body - MemberInit (Foo) = #Foo
        · NewExpression - New (Foo) = #Foo
        · Bindings[0] - Assignment Bar
            · Expression - Constant (string) = "abcd"
---- VBCompiler.NamedTypeWithInitializers
Lambda (Func<Foo>)
    · Body - MemberInit (Foo) = #Foo
        · NewExpression - New (Foo) = #Foo
        · Bindings[0] - Assignment Bar
            · Expression - Constant (string) = "abcd"
        · Bindings[1] - Assignment Baz
            · Expression - Constant (string) = "efgh"
---- VBCompiler.NamedTypeConstructorParameters
Lambda (Func<Foo>)
    · Body - New (Foo) = #Foo
        · Arguments[0] - Constant (string) = "ijkl"
---- VBCompiler.NamedTypeConstructorParametersWithInitializers
Lambda (Func<Foo>)
    · Body - MemberInit (Foo) = #Foo
        · NewExpression - New (Foo) = #Foo
            · Arguments[0] - Constant (string) = "ijkl"
        · Bindings[0] - Assignment Bar
            · Expression - Constant (string) = "abcd"
        · Bindings[1] - Assignment Baz
            · Expression - Constant (string) = "efgh"
---- VBCompiler.AnonymousType
Lambda (Func<{ string Bar, string Baz }>)
    · Body - New ({ string Bar, string Baz }) = { Bar = abcd, Baz = efgh }
        · Arguments[0] - Constant (string) = "abcd"
        · Arguments[1] - Constant (string) = "efgh"
---- VBCompiler.AnonymousTypeFromVariables
Lambda (Func<{ string Bar, string Baz }>)
    · Body - New ({ string Bar, string Baz }) = { Bar = abcd, Baz = efgh }
        · Arguments[0] - MemberAccess (string) $VB$Local_Bar = "abcd"
            · Expression - Constant (<closure>) = #<closure>
        · Arguments[1] - MemberAccess (string) $VB$Local_Baz = "efgh"
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.CollectionTypeWithInitializer
Lambda (Func<List<string>>)
    · Body - ListInit (List<string>) = #List<string>
        · NewExpression - New (List<string>) = #List<string>
        · Initializers[0] - ElementInit
            · Arguments[0] - Constant (string) = "abcd"
        · Initializers[1] - ElementInit
            · Arguments[0] - Constant (string) = "efgh"
---- VBCompiler.CollectionTypeWithMultipleElementsInitializers
Lambda (Func<Wrapper>)
    · Body - ListInit (Wrapper) = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
        · NewExpression - New (Wrapper) = #Wrapper
        · Initializers[0] - ElementInit
            · Arguments[0] - Constant (string) = "ab"
            · Arguments[1] - Constant (string) = "cd"
        · Initializers[1] - ElementInit
            · Arguments[0] - Constant (string) = "ef"
            · Arguments[1] - Constant (string) = "gh"
---- VBCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
Lambda (Func<Wrapper>)
    · Body - ListInit (Wrapper) = #TargetInvocationException:"Exception has been thrown by the target of an invocation."
        · NewExpression - New (Wrapper) = #Wrapper
        · Initializers[0] - ElementInit
            · Arguments[0] - Constant (string) = "ab"
            · Arguments[1] - Constant (string) = "cd"
        · Initializers[1] - ElementInit
            · Arguments[0] - Constant (string) = "ef"
---- VBCompiler.SingleDimensionInit
Lambda (Func<string[]>)
    · Body - NewArrayInit (string[]) = new[] { "" }
        · Expressions[0] - Constant (string) = ""
---- VBCompiler.SingleDimensionInitExplicitType
Lambda (Func<object[]>)
    · Body - NewArrayInit (object[]) = new[] { "" }
        · Expressions[0] - Convert (object) = ""
            · Operand - Constant (string) = ""
---- VBCompiler.SingleDimensionWithBounds
Lambda (Func<string[]>)
    · Body - NewArrayBounds (string[]) = new[] { null, null, null, null, null }
        · Expressions[0] - Constant (int) = 5
---- VBCompiler.MultidimensionWithBounds
Lambda (Func<string[,]>)
    · Body - NewArrayBounds (string[,]) = #string[,]
        · Expressions[0] - Constant (int) = 2
        · Expressions[1] - Constant (int) = 3
---- VBCompiler.JaggedWithElementsImplicitType
Lambda (Func<string[][]>)
    · Body - NewArrayInit (string[][]) = #string[][]
        · Expressions[0] - NewArrayInit (string[]) = new[] { "ab", "cd" }
            · Expressions[0] - Constant (string) = "ab"
            · Expressions[1] - Constant (string) = "cd"
        · Expressions[1] - NewArrayInit (string[]) = new[] { "ef", "gh" }
            · Expressions[0] - Constant (string) = "ef"
            · Expressions[1] - Constant (string) = "gh"
---- VBCompiler.JaggedWithElementsImplicitTypeInnerNonLiteral
Lambda (Func<string[][]>)
    · Body - NewArrayInit (string[][]) = #string[][]
        · Expressions[0] - MemberAccess (string[]) $VB$Local_arr1 = new[] { "ab", "cd" }
            · Expression - Constant (<closure>) = #<closure>
        · Expressions[1] - MemberAccess (string[]) $VB$Local_arr2 = new[] { "ef", "gh" }
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.JaggedWithElementsExplicitType
Lambda (Func<object[][]>)
    · Body - NewArrayInit (object[][]) = #object[][]
        · Expressions[0] - Convert (object[]) = new[] { "ab", "cd" }
            · Operand - NewArrayInit (string[]) = new[] { "ab", "cd" }
                · Expressions[0] - Constant (string) = "ab"
                · Expressions[1] - Constant (string) = "cd"
        · Expressions[1] - Convert (object[]) = new[] { "ef", "gh" }
            · Operand - NewArrayInit (string[]) = new[] { "ef", "gh" }
                · Expressions[0] - Constant (string) = "ef"
                · Expressions[1] - Constant (string) = "gh"
---- VBCompiler.JaggedWithBounds
Lambda (Func<string[][]>)
    · Body - NewArrayBounds (string[][]) = #string[][]
        · Expressions[0] - Constant (int) = 5
---- VBCompiler.ArrayOfMultidimensionalArray
Lambda (Func<string[][,]>)
    · Body - NewArrayBounds (string[][,]) = #string[][,]
        · Expressions[0] - Constant (int) = 5
---- VBCompiler.MultidimensionalArrayOfArray
Lambda (Func<string[,][]>)
    · Body - NewArrayBounds (string[,][]) = #string[,][]
        · Expressions[0] - Constant (int) = 3
        · Expressions[1] - Constant (int) = 2
---- VBCompiler.ArrayLength
Lambda (Func<int>)
    · Body - ArrayLength (int) = 0
        · Operand - MemberAccess (string[]) $VB$Local_arr = new[] {  }
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Convert
Lambda (Func<Random>)
    · Body - Convert (Random) = #Random
        · Operand - MemberAccess (object) $VB$Local_o = #Random
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.CObject
Lambda (Func<object>)
    · Body - Convert (object) = #List<string>
        · Operand - MemberAccess (List<string>) $VB$Local_lst = #List<string>
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Negate
Lambda (Func<int>)
    · Body - NegateChecked (int) = -1
        · Operand - MemberAccess (int) $VB$Local_i = 1
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.BitwiseNot
Lambda (Func<int>)
    · Body - Not (int) = -2
        · Operand - MemberAccess (int) $VB$Local_i = 1
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.LogicalNot
Lambda (Func<bool>)
    · Body - Not (bool) = false
        · Operand - MemberAccess (bool) $VB$Local_b = true
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.TypeAs
Lambda (Func<string>)
    · Body - TypeAs (string)
        · Operand - MemberAccess (object) $VB$Local_o
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.Conditional
Lambda (Func<int, int>)
    · Parameters[0] - Parameter (int) i
    · Body - Conditional (int)
        · Test - GreaterThan (bool)
            · Left - Parameter (int) i
            · Right - Constant (int) = 10
        · IfTrue - Parameter (int) i
        · IfFalse - AddChecked (int)
            · Left - Parameter (int) i
            · Right - Constant (int) = 10
---- VBCompiler.TypeCheck
Lambda (Func<bool>)
    · Body - TypeIs (bool) = true
        · Expression - Constant (string) = ""
---- VBCompiler.InvocationNoArguments
Lambda (Func<int>)
    · Body - Invoke (int) = 16
        · Expression - MemberAccess (VB$AnonymousDelegate<int>) $VB$Local_del = #VB$AnonymousDelegate<int>
            · Expression - Constant (<closure>) = #<closure>
---- VBCompiler.InvocationOneArgument
Lambda (Func<int>)
    · Body - Invoke (int) = 16
        · Arguments[0] - Constant (int) = 5
        · Expression - MemberAccess (VB$AnonymousDelegate<int, int>) $VB$Local_del = #VB$AnonymousDelegate<int, int>
            · Expression - Constant (<closure>) = #<closure>
------
