---- CSCompiler.Add
() => x + y
---- CSCompiler.AndAlso
() => b1 && b2
---- CSCompiler.AndBitwise
() => i & j
---- CSCompiler.AndLogical
() => b1 & b2
---- CSCompiler.AnonymousType
() => new {
    Bar = "abcd",
    Baz = "efgh"
}
---- CSCompiler.AnonymousTypeFromVariables
() => new {
    Bar,
    Baz
}
---- CSCompiler.ArrayIndex
() => arr[0]
---- CSCompiler.ArrayLength
() => arr.Length
---- CSCompiler.ArrayMultipleIndex
() => arr[5, 6]
---- CSCompiler.ArrayOfMultidimensionalArray
() => new string[5][,]
---- CSCompiler.ArraySingleIndex
() => arr[5]
---- CSCompiler.BitwiseNot
() => ~i
---- CSCompiler.ClosedVariable
() => s
---- CSCompiler.Coalesce
() => s1 ?? s2
---- CSCompiler.CollectionTypeWithInitializer
() => new List<string>() {
    "abcd",
    "efgh"
}
---- CSCompiler.CollectionTypeWithMultipleElementsInitializers
() => new Wrapper() {
    {
        "ab",
        "cd"
    },
    {
        "ef",
        "gh"
    }
}
---- CSCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
() => new Wrapper() {
    {
        "ab",
        "cd"
    },
    "ef"
}
---- CSCompiler.Conditional
(int i) => i > 10 ? i : i + 10
---- CSCompiler.Convert
() => lst
---- CSCompiler.DefaultRefType
() => null
---- CSCompiler.DefaultValueType
() => 0
---- CSCompiler.Divide
() => x / y
---- CSCompiler.Equal
() => i == j
---- CSCompiler.ExclusiveOrBitwise
() => i ^ j
---- CSCompiler.ExclusiveOrLogical
() => b1 ^ b2
---- CSCompiler.ExtensionMethod0Arguments
() => lst.Count()
---- CSCompiler.ExtensionMethod1Argument
() => lst.DummyExtensionMethod1Arguments(1)
---- CSCompiler.ExtensionMethod2Arguments
() => lst.DummyExtensionMethod2Arguments(5, 17)
---- CSCompiler.False
() => false
---- CSCompiler.GreaterThan
() => i > j
---- CSCompiler.GreaterThanOrEqual
() => i >= j
---- CSCompiler.InstanceMember
() => s.Length
---- CSCompiler.InstanceMethod0Arguments
() => s.ToString()
---- CSCompiler.InstanceMethod1Argument
() => s.CompareTo("")
---- CSCompiler.InstanceMethod2Arguments
() => s.IndexOf('a', 2)
---- CSCompiler.Integer
() => 5
---- CSCompiler.InterpolatedString
() => $"{new DateTime(2001, 3, 25):yyyy-MM-dd}"
---- CSCompiler.InvocationNoArguments
() => del()
---- CSCompiler.InvocationOneArgument
() => del(5)
---- CSCompiler.JaggedWithBounds
() => new string[5][]
---- CSCompiler.JaggedWithElementsExplicitType
() => new object[][] { new[] { "ab", "cd" }, new[] { "ef", "gh" } }
---- CSCompiler.JaggedWithElementsImplicitType
() => new string[][] { new[] { "ab", "cd" }, new[] { "ef", "gh" } }
---- CSCompiler.LeftShift
() => i << j
---- CSCompiler.LessThan
() => i < j
---- CSCompiler.LessThanOrEqual
() => i <= j
---- CSCompiler.ListBinding
() => new Node() {
    Children = {
        new Node(),
        new Node()
    }
}
---- CSCompiler.LogicalNot
() => !b
---- CSCompiler.MathPow
(double x, double y) => Math.Pow(x, y)
---- CSCompiler.MemberMemberBinding
() => new Node() {
    Data = {
        Name = "abcd"
    }
}
---- CSCompiler.Modulo
() => x % y
---- CSCompiler.MultidimensionalArrayOfArray
() => new string[3, 2][]
---- CSCompiler.MultidimensionWithBounds
() => new string[2, 3]
---- CSCompiler.Multiply
() => x * y
---- CSCompiler.NamedType
() => new Random()
---- CSCompiler.NamedTypeConstructorParameters
() => new Foo("ijkl")
---- CSCompiler.NamedTypeConstructorParametersWithInitializers
() => new Foo("ijkl") {
    Bar = "abcd",
    Baz = "efgh"
}
---- CSCompiler.NamedTypeWithInitializer
() => new Foo() {
    Bar = "abcd"
}
---- CSCompiler.NamedTypeWithInitializers
() => new Foo() {
    Bar = "abcd",
    Baz = "efgh"
}
---- CSCompiler.Negate
() => -i
---- CSCompiler.NonInteger
() => 7.32
---- CSCompiler.NoParametersNonVoidReturn
() => "abcd"
---- CSCompiler.NoParametersVoidReturn
() => Console.WriteLine()
---- CSCompiler.NotEqual
() => i != j
---- CSCompiler.Nothing
() => null
---- CSCompiler.OneParameterNonVoidReturn
(string s) => s
---- CSCompiler.OneParameterVoidReturn
(string s) => Console.WriteLine(s)
---- CSCompiler.OrBitwise
() => i | j
---- CSCompiler.OrElse
() => b1 || b2
---- CSCompiler.OrLogical
() => b1 | b2
---- CSCompiler.RightShift
() => i >> j
---- CSCompiler.SingleDimensionInit
() => new[] { "" }
---- CSCompiler.SingleDimensionInitExplicitType
() => new object[] { "" }
---- CSCompiler.SingleDimensionWithBounds
() => new string[5]
---- CSCompiler.StaticMember
() => string.Empty
---- CSCompiler.StaticMethod0Arguments
() => Dummy.DummyMethod()
---- CSCompiler.StaticMethod1Argument
() => string.Intern("")
---- CSCompiler.StaticMethod2Arguments
() => string.Join(",", new[] { "a", "b" })
---- CSCompiler.String
() => "abcd"
---- CSCompiler.StringConcat
(string s1, string s2) => s1 + s2
---- CSCompiler.Subtract
() => x - y
---- CSCompiler.True
() => true
---- CSCompiler.TwoParametersNonVoidReturn
(string s1, string s2) => s1 + s2
---- CSCompiler.TwoParametersVoidReturn
(string s1, string s2) => Console.WriteLine(s1 + s2)
---- CSCompiler.Type
() => typeof(string)
---- CSCompiler.TypeAs
() => o as string
---- CSCompiler.TypeCheck
() => o is string
---- CSCompiler.TypeIndexer
() => lst[3]
---- FactoryMethods.Array
new[] { "abcd", 5, #Random }
---- FactoryMethods.ArrayOfMultidimensionalArray
new string[5][,]
---- FactoryMethods.BlockMultipleVariable
(
    int i,
    string s1,
    true,
    true
)
---- FactoryMethods.BlockNoVariables
(
    true,
    true
)
---- FactoryMethods.BlockSingleVariable
(
    int i,
    true,
    true
)
---- FactoryMethods.CollectionTypeWithInitializer
new List<string>() {
    "abcd",
    "efgh"
}
---- FactoryMethods.CollectionTypeWithMultiElementInitializers
new Wrapper() {
    {
        "ab",
        "cd"
    },
    {
        "ef",
        "gh"
    }
}
---- FactoryMethods.CollectionTypeWithSingleOrMultiElementInitializers
new Wrapper() {
    {
        "ab",
        "cd"
    },
    "ef"
}
---- FactoryMethods.ConstructAdd
x + y
---- FactoryMethods.ConstructAddAssign
i += j
---- FactoryMethods.ConstructAddAssignChecked
i += j
---- FactoryMethods.ConstructAddChecked
x + y
---- FactoryMethods.ConstructAndAlso
b1 && b2
---- FactoryMethods.ConstructAndAssign
b1 &= b2
---- FactoryMethods.ConstructAndBitwise
i & j
---- FactoryMethods.ConstructAndLogical
b1 & b2
---- FactoryMethods.ConstructArrayIndex
arr[i]
---- FactoryMethods.ConstructArrayLength
arr.Length
---- FactoryMethods.ConstructAssign
x = 5.2
---- FactoryMethods.ConstructBitwiseNot
~i
---- FactoryMethods.ConstructCatchMultiStatement
catch (Exception ex) {
    Console.WriteLine(true);
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCatchMultiStatementWithFilter
catch (Exception ex) when (true) {
    Console.WriteLine(true);
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCatchMultiStatementWithType
catch (InvalidCastException) {
    Console.WriteLine(true);
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCatchSingleStatement
catch (Exception ex) {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCatchSingleStatementWithFilter
catch (Exception ex) when (true) {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCatchSingleStatementWithType
catch (InvalidCastException) {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCatchWithMultiStatementFilter
catch (Exception ex) when (
    true,
    true
) {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructCoalesce
s1 ?? s2
---- FactoryMethods.ConstructConvert
arr
---- FactoryMethods.ConstructConvertChecked
(float)5
---- FactoryMethods.ConstructConvertCheckedForReferenceType
arr
---- FactoryMethods.ConstructDecrement
i -= 1
---- FactoryMethods.ConstructDivide
x / y
---- FactoryMethods.ConstructDivideAssign
i /= j
---- FactoryMethods.ConstructEmptyLabelTarget

---- FactoryMethods.ConstructEqual
x == y
---- FactoryMethods.ConstructExclusiveOrAssign
b1 ^= b2
---- FactoryMethods.ConstructExclusiveOrBitwise
i ^ j
---- FactoryMethods.ConstructExclusiveOrLogical
b1 ^ b2
---- FactoryMethods.ConstructGetIndex
obj["key"]
---- FactoryMethods.ConstructGetIndexMultipleKeys
obj["key", 1]
---- FactoryMethods.ConstructGetMember
obj.Data
---- FactoryMethods.ConstructGreaterThan
x > y
---- FactoryMethods.ConstructGreaterThanOrEqual
x >= y
---- FactoryMethods.ConstructIncrement
i += 1
---- FactoryMethods.ConstructInvocationNoArguments
obj()
---- FactoryMethods.ConstructInvocationWithArguments
obj("arg1", 15)
---- FactoryMethods.ConstructIsFalse
!b1
---- FactoryMethods.ConstructIsTrue
b1
---- FactoryMethods.ConstructLabel
(
    int i,
    (
        int j,
        true,
target:
        true
    )
)
---- FactoryMethods.ConstructLabel1
(
    int i,
    (
        int j,
target:
        true
    )
)
---- FactoryMethods.ConstructLabelTarget
target
---- FactoryMethods.ConstructLeftShift
i << j
---- FactoryMethods.ConstructLeftShiftAssign
i <<= j
---- FactoryMethods.ConstructLessThan
x < y
---- FactoryMethods.ConstructLessThanOrEqual
x <= y
---- FactoryMethods.ConstructLogicalNot
!b1
---- FactoryMethods.ConstructMemberInvocationNoArguments
obj.Method()
---- FactoryMethods.ConstructMemberInvocationWithArguments
obj.Method("arg1", 15)
---- FactoryMethods.ConstructModulo
x % y
---- FactoryMethods.ConstructModuloAssign
i %= j
---- FactoryMethods.ConstructMultiply
x * y
---- FactoryMethods.ConstructMultiplyAssign
i *= j
---- FactoryMethods.ConstructMultiplyAssignChecked
i *= j
---- FactoryMethods.ConstructMultiplyChecked
x * y
---- FactoryMethods.ConstructNegate
-i
---- FactoryMethods.ConstructNotEqual
x != y
---- FactoryMethods.ConstructOrAssign
b1 |= b2
---- FactoryMethods.ConstructOrBitwise
i | j
---- FactoryMethods.ConstructOrElse
b1 || b2
---- FactoryMethods.ConstructOrLogical
b1 | b2
---- FactoryMethods.ConstructPostDecrementAssign
i--
---- FactoryMethods.ConstructPostIncrementAssign
i++
---- FactoryMethods.ConstructPower
Math.Pow(x, y)
---- FactoryMethods.ConstructPowerAssign
x = Math.Pow(x, y)
---- FactoryMethods.ConstructPreDecrementAssign
--i
---- FactoryMethods.ConstructPreIncrementAssign
++i
---- FactoryMethods.ConstructReferenceEqual
lstString == lstString
---- FactoryMethods.ConstructReferenceNotEqual
lstString != lstString
---- FactoryMethods.ConstructRethrow
throw
---- FactoryMethods.ConstructRightShift
i >> j
---- FactoryMethods.ConstructRightShiftAssign
i >>= j
---- FactoryMethods.ConstructRuntimeVariables
// variables -- double x, string s1
---- FactoryMethods.ConstructSetIndex
obj["key"] = 42
---- FactoryMethods.ConstructSetIndexMultipleKeys
obj["key", 1] = 42
---- FactoryMethods.ConstructSetMember
obj.Data = 42
---- FactoryMethods.ConstructSimpleCatch
catch {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructSubtract
x - y
---- FactoryMethods.ConstructSubtractAssign
i -= j
---- FactoryMethods.ConstructSubtractAssignChecked
i -= j
---- FactoryMethods.ConstructSubtractChecked
x - y
---- FactoryMethods.ConstructThrow
throw #Random
---- FactoryMethods.ConstructTryCatch
try {
    true;
} catch {
    true;
}
---- FactoryMethods.ConstructTryCatchFinally
try {
    true;
} catch (Exception ex) {
    true;
} finally {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructTryFault
try {
    Console.WriteLine(true);
} fault {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructTryFinally
try {
    Console.WriteLine(true);
} finally {
    Console.WriteLine(true);
}
---- FactoryMethods.ConstructTypeAs
arr as object
---- FactoryMethods.DifferentTypeForNodeAndValue
#List<string>
---- FactoryMethods.EmptyLoop
while (true) {
    true;
}
---- FactoryMethods.EmptyLoop1
while (true) {
    true;
    true;
}
---- FactoryMethods.ExtensionMethod0Arguments
lstString.Count()
---- FactoryMethods.InstanceIndexer
lstString[0]
---- FactoryMethods.InstanceMember
"".Length
---- FactoryMethods.InstanceMethod0Arguments
s.ToString()
---- FactoryMethods.InstanceMethod1Argument
s.CompareTo("")
---- FactoryMethods.InstanceMethod2Arguments
s.IndexOf('a', 2)
---- FactoryMethods.JaggedWithBounds
new string[5][]
---- FactoryMethods.JaggedWithElementsExplicitType
new object[][] { new[] { "ab", "cd" }, new[] { "ef", "gh" } }
---- FactoryMethods.JaggedWithElementsImplicitType
new string[][] { new[] { "ab", "cd" }, new[] { "ef", "gh" } }
---- FactoryMethods.LambdaMultilineBlockNonvoidReturn
() => {
    true;
    return true;
}
---- FactoryMethods.LambdaMultilineNestedBlockNonvoidReturn
() => {
    true;
    {
        string s1;
        string s2;
        true;
        return true;
    }
}
---- FactoryMethods.MakeArrayAccess
arr[0]
---- FactoryMethods.MakeArrayIndex
arr[0]
---- FactoryMethods.MakeArrayMultipleIndex
arr2d[0, 1]
---- FactoryMethods.MakeBreak
break target
---- FactoryMethods.MakeBreakWithValue
break target 5
---- FactoryMethods.MakeByRefParameter
(ref string s4) => true
---- FactoryMethods.MakeClearDebugInfo
// Clear debug info from source.txt
---- FactoryMethods.MakeConditional
i > 10 ? i : i + 10
---- FactoryMethods.MakeContinue
continue target
---- FactoryMethods.MakeDebugInfo
// Debug to source.txt -- L1C2 : L3C4
---- FactoryMethods.MakeDefaultRefType
default(string)
---- FactoryMethods.MakeDefaultValueType
default(int)
---- FactoryMethods.MakeElementInit
"abcd"
---- FactoryMethods.MakeElementInit2Arguments
{
    "abcd",
    "efgh"
}
---- FactoryMethods.MakeGotoWithoutValue
goto target
---- FactoryMethods.MakeGotoWithValue
goto target 5
---- FactoryMethods.MakeInvocation
(() => 5)()
---- FactoryMethods.MakeListBinding
Children = {
    new Node(),
    new Node()
}
---- FactoryMethods.MakeMemberBind
Foo = "abcd"
---- FactoryMethods.MakeMemberMemberBind
Data = {
    Name = "abcd"
}
---- FactoryMethods.MakeQuoted
(
    double x,
    // --- Quoted - begin
        () => Console.WriteLine(true)
    // --- Quoted - end
)
---- FactoryMethods.MakeQuoted1
() => {
    return
    // --- Quoted - begin
        () => Console.WriteLine(true)
    // --- Quoted - end
}
---- FactoryMethods.MakeReturn
return target
---- FactoryMethods.MakeReturnWithValue
return target 5
---- FactoryMethods.MakeTypeCheck
"" is string
---- FactoryMethods.MakeTypeEqual
"".GetType() == typeof(IEnumerable)
---- FactoryMethods.MultidimensionalArrayOfArray
new string[3, 2][]
---- FactoryMethods.MultidimensionWithBounds
new string[2, 3]
---- FactoryMethods.MultilineIfFalse
if (true) {
    Console.WriteLine(true);
} else {
    Console.WriteLine(false);
    Console.WriteLine(false);
}
---- FactoryMethods.MultilineIfTrue
if (true) {
    Console.WriteLine(true);
    Console.WriteLine(true);
}
---- FactoryMethods.MultilineLambda
() => {
    if (true) {
        Console.WriteLine(true);
    }
}
---- FactoryMethods.MultilineTestPart
(
    true,
    true
) ? "true".Length : "false".Length
---- FactoryMethods.MultilineTestPart1
if (
    true,
    true
) {
    Console.WriteLine(true);
}
---- FactoryMethods.MultiValueSwitchCase
case 5:
case 6:
    Console.WriteLine(true);
    Console.WriteLine(true);
    break;
---- FactoryMethods.MultiValueSwitchCase1
case 5:
case 6:
    Console.WriteLine(true);
    break;
---- FactoryMethods.NamedLambda
(string s1, string s2) => s1 + s2
---- FactoryMethods.NamedType
new Random()
---- FactoryMethods.NamedTypeConstructorParameters
new Foo("ijkl")
---- FactoryMethods.NamedTypeConstructorParametersWithInitializers
new Foo("ijkl") {
    Bar = "abcd",
    Baz = "efgh"
}
---- FactoryMethods.NamedTypeWithInitializer
new Foo() {
    Bar = "abcd"
}
---- FactoryMethods.NamedTypeWithInitializers
new Foo() {
    Bar = "abcd",
    Baz = "efgh"
}
---- FactoryMethods.NestedBlockInBlockSyntax
if (true) {
    true;
    true;
    true;
    true;
}
---- FactoryMethods.NestedBlockInBlockSyntaxWithVariable
if (true) {
    true;
    {
        string s1;
        true;
        true;
    }
    true;
}
---- FactoryMethods.NestedBlockInTest
if (
    true,
    true,
    true,
    true
) {
    true;
}
---- FactoryMethods.NestedBlockInTestWithVariables
if (
    true,
    (
        string s1,
        true,
        true
    ),
    true
) {
    true;
}
---- FactoryMethods.NestedElse
if (true) {
    Console.WriteLine(true);
} else if (true) {
    Console.WriteLine(true);
}
---- FactoryMethods.NestedIfThen
if (true) {
    if (true) {
        Console.WriteLine(true);
    }
}
---- FactoryMethods.NestedInlineBlock
(
    true,
    true,
    true,
    true
)
---- FactoryMethods.NestedInlineBlockWithVariable
(
    true,
    (
        string s1,
        true,
        true
    ),
    true
)
---- FactoryMethods.NestedLambda
() => {
    return (string s1, string s2) => s1 + s2;
}
---- FactoryMethods.NonVoidConditionalWithElse
true ? "true".Length : "false".Length
---- FactoryMethods.NonVoidConditionalWithoutElse
true ? "true".Length : default(int)
---- FactoryMethods.NoParametersNonVoidReturn
() => "abcd"
---- FactoryMethods.NoParametersVoidReturn
() => Console.WriteLine()
---- FactoryMethods.OldTuple
Tuple.Create("abcd", 5)
---- FactoryMethods.OneParameterNonVoidReturn
(string s) => s
---- FactoryMethods.OneParameterVoidReturn
(string s) => Console.WriteLine(s)
---- FactoryMethods.PropertyIndexer
lstString[0]
---- FactoryMethods.Random
#Random
---- FactoryMethods.RuntimeVariablesWithinBlock
(
    string s2,
    true
    // variables -- double x, string s1
)
---- FactoryMethods.SingleDimensionInit
new[] { "" }
---- FactoryMethods.SingleDimensionInitExplicitType
new object[] { "" }
---- FactoryMethods.SingleDimensionWithBounds
new string[5]
---- FactoryMethods.SingleValueSwitchCase
case 5:
    Console.WriteLine(true);
    Console.WriteLine(true);
    break;
---- FactoryMethods.SingleValueSwitchCase1
case 5:
    Console.WriteLine(true);
    break;
---- FactoryMethods.StaticMember
string.Empty
---- FactoryMethods.StaticMethod0Arguments
Dummy.DummyMethod()
---- FactoryMethods.StaticMethod1Argument
string.Intern("")
---- FactoryMethods.StaticMethod2Arguments
string.Join(",", new[] { "a", "b" })
---- FactoryMethods.StringConcat
s1 + s2
---- FactoryMethods.SwitchOnExpressionWithDefaultMultiStatement
switch (i) {
    case 4:
        Console.WriteLine(true);
        break;
    case 5:
        Console.WriteLine(false);
        break;
    default:
        true;
        true;
        break;
}
---- FactoryMethods.SwitchOnExpressionWithDefaultSingleStatement
switch (i) {
    case 4:
        Console.WriteLine(true);
        break;
    case 5:
        Console.WriteLine(false);
        break;
    default:
        default(void);
        break;
}
---- FactoryMethods.SwitchOnExpressionWithoutDefault
switch (i) {
    case 4:
        Console.WriteLine(true);
        break;
    case 5:
        Console.WriteLine(false);
        break;
}
---- FactoryMethods.SwitchOnMultipleStatementsWithDefault
switch (
    i,
    j
) {
    case 4:
        Console.WriteLine(true);
        break;
    case 5:
        Console.WriteLine(false);
        break;
    default:
        true;
        true;
        break;
}
---- FactoryMethods.SwitchOnMultipleStatementsWithoutDefault
switch (
    i,
    j
) {
    case 4:
        Console.WriteLine(true);
        break;
    case 5:
        Console.WriteLine(false);
        break;
}
---- FactoryMethods.TwoParametersNonVoidReturn
(string s1, string s2) => s1 + s2
---- FactoryMethods.TwoParametersVoidReturn
(string s1, string s2) => Console.WriteLine(s1 + s2)
---- FactoryMethods.Type
typeof(string)
---- FactoryMethods.ValueTuple
("abcd", 5)
---- FactoryMethods.VoidConditional1WithElse
if (true) {
    Console.WriteLine(true);
} else {
    Console.WriteLine(false);
}
---- FactoryMethods.VoidConditional1WithoutElse
if (true) {
    Console.WriteLine(true);
}
---- FactoryMethods.VoidConditionalWithElse
if (true) {
    Console.WriteLine(true);
} else {
    Console.WriteLine(false);
}
---- FactoryMethods.VoidConditionalWithoutElse
if (true) {
    Console.WriteLine(true);
}
---- VBCompiler.Add
() => x + y
---- VBCompiler.AndAlso
() => b1 && b2
---- VBCompiler.AndBitwise
() => i & j
---- VBCompiler.AndLogical
() => b1 & b2
---- VBCompiler.AnonymousType
() => new {
    Bar = "abcd",
    Baz = "efgh"
}
---- VBCompiler.AnonymousTypeFromVariables
() => new {
    Bar,
    Baz
}
---- VBCompiler.ArrayIndex
() => arr[0]
---- VBCompiler.ArrayLength
() => arr.Length
---- VBCompiler.ArrayMultipleIndex
() => arr[5, 6]
---- VBCompiler.ArrayOfMultidimensionalArray
() => new string[5][,]
---- VBCompiler.ArraySingleIndex
() => arr[5]
---- VBCompiler.BitwiseNot
() => ~i
---- VBCompiler.ClosedVariable
() => s
---- VBCompiler.Coalesce
() => s1 ?? s2
---- VBCompiler.CObject
() => lst
---- VBCompiler.CollectionTypeWithInitializer
() => new List<string>() {
    "abcd",
    "efgh"
}
---- VBCompiler.CollectionTypeWithMultipleElementsInitializers
() => new Wrapper() {
    {
        "ab",
        "cd"
    },
    {
        "ef",
        "gh"
    }
}
---- VBCompiler.CollectionTypeWithSingleOrMultipleElementsInitializers
() => new Wrapper() {
    {
        "ab",
        "cd"
    },
    "ef"
}
---- VBCompiler.Conditional
(int i) => i > 10 ? i : i + 10
---- VBCompiler.ConstantNothingToObject
() => null
---- VBCompiler.ConstantNothingToReferenceType
() => null
---- VBCompiler.ConstantNothingToValueType
() => 0
---- VBCompiler.Convert
() => (Random)o
---- VBCompiler.Divide
() => x / y
---- VBCompiler.Equal
() => i == j
---- VBCompiler.EscapedString
() => "\""
---- VBCompiler.ExclusiveOrBitwise
() => i ^ j
---- VBCompiler.ExclusiveOrLogical
() => b1 ^ b2
---- VBCompiler.False
() => false
---- VBCompiler.GreaterThan
() => i > j
---- VBCompiler.GreaterThanOrEqual
() => i >= j
---- VBCompiler.InstanceMember
() => s.Length
---- VBCompiler.InstanceMethod0Arguments
() => s.ToString()
---- VBCompiler.InstanceMethod1Argument
() => s.CompareTo("")
---- VBCompiler.InstanceMethod2Arguments
() => s.IndexOf('a', 2)
---- VBCompiler.Integer
() => 5
---- VBCompiler.InterpolatedString
() => $"{#DateTime:yyyy-MM-dd}"
---- VBCompiler.InvocationNoArguments
() => del()
---- VBCompiler.InvocationOneArgument
() => del(5)
---- VBCompiler.JaggedWithBounds
() => new string[5][]
---- VBCompiler.JaggedWithElementsExplicitType
() => new object[][] { new[] { "ab", "cd" }, new[] { "ef", "gh" } }
---- VBCompiler.JaggedWithElementsImplicitType
() => new string[][] { new[] { "ab", "cd" }, new[] { "ef", "gh" } }
---- VBCompiler.JaggedWithElementsImplicitTypeInnerNonLiteral
() => new string[][] { arr1, arr2 }
---- VBCompiler.LeftShift
() => i << j & 31
---- VBCompiler.LessThan
() => i < j
---- VBCompiler.LessThanOrEqual
() => i <= j
---- VBCompiler.LogicalNot
() => !b
---- VBCompiler.Modulo
() => x % y
---- VBCompiler.MultidimensionalArrayOfArray
() => new string[3, 2][]
---- VBCompiler.MultidimensionWithBounds
() => new string[2, 3]
---- VBCompiler.Multiply
() => x * y
---- VBCompiler.NamedType
() => new Random()
---- VBCompiler.NamedTypeConstructorParameters
() => new Foo("ijkl")
---- VBCompiler.NamedTypeConstructorParametersWithInitializers
() => new Foo("ijkl") {
    Bar = "abcd",
    Baz = "efgh"
}
---- VBCompiler.NamedTypeWithInitializer
() => new Foo() {
    Bar = "abcd"
}
---- VBCompiler.NamedTypeWithInitializers
() => new Foo() {
    Bar = "abcd",
    Baz = "efgh"
}
---- VBCompiler.Negate
() => -i
---- VBCompiler.NonInteger
() => 7.32
---- VBCompiler.NoParametersNonVoidReturn
() => "abcd"
---- VBCompiler.NoParametersVoidReturn
() => Console.WriteLine()
---- VBCompiler.NotEqual
() => i != j
---- VBCompiler.Nothing
() => null
---- VBCompiler.NothingString
() => null
---- VBCompiler.OneParameterNonVoidReturn
(string s) => s
---- VBCompiler.OneParameterVoidReturn
(string s) => Console.WriteLine(s)
---- VBCompiler.OrBitwise
() => i | j
---- VBCompiler.OrElse
() => b1 || b2
---- VBCompiler.OrLogical
() => b1 | b2
---- VBCompiler.Power
() => Math.Pow(x, y)
---- VBCompiler.RightShift
() => i >> j & 31
---- VBCompiler.SingleDimensionInit
() => new[] { "" }
---- VBCompiler.SingleDimensionInitExplicitType
() => new[] { "" }
---- VBCompiler.SingleDimensionWithBounds
() => new string[5]
---- VBCompiler.StaticMember
() => string.Empty
---- VBCompiler.StaticMethod0Arguments
() => Dummy.DummyMethod()
---- VBCompiler.StaticMethod1Argument
() => string.Intern("")
---- VBCompiler.StaticMethod2Arguments
() => string.Join(",", new[] { new string(arr) })
---- VBCompiler.StaticMethod2ArgumentsWithoutConversion
() => string.Join(",", arr)
---- VBCompiler.String
() => "abcd"
---- VBCompiler.StringConcat
(string s1, string s2) => s1 + s2
---- VBCompiler.StringConcatOperator
(string s1, string s2) => s1 + s2
---- VBCompiler.StringConcatOperatorParamArray
(string s1, string s2) => s1 + s2 + s1 + s2 + s1 + s2
---- VBCompiler.Subtract
() => x - y
---- VBCompiler.True
() => true
---- VBCompiler.TwoParametersNonVoidReturn
(string s1, string s2) => s1 + s2
---- VBCompiler.TwoParametersVoidReturn
(string s1, string s2) => Console.WriteLine(s1 + s2)
---- VBCompiler.TypeAs
() => o as string
---- VBCompiler.TypeCheck
() => "" is string
---- VBCompiler.TypeIndexer
() => lst[3]
---- VBCompiler.VBDeclaredTypeIndexer
() => x[5]
---- VBCompiler.LeftEnumNonConstant
() => dow >= DayOfWeek.Tuesday
---- VBCompiler.RightEnumNonConstant
() => DayOfWeek.Tuesday <= dow
---- VBCompiler.DualNonConstant
() => dow1 == dow2
---- CSCompiler.LeftEnumNonConstant
() => dow >= DayOfWeek.Tuesday
---- CSCompiler.RightEnumNonConstant
() => DayOfWeek.Tuesday <= dow
---- CSCompiler.DualNonConstant
() => dow1 == dow2
---- VBCompiler.LikeOperatorStrings
(string s1, string s2) => LikeOperator.LikeString(s1, s2, CompareMethod.Binary)
---- VBCompiler.LikeOperatorObjects
(object o1, object o2) => LikeOperator.LikeObject(o1, o2, CompareMethod.Binary)
---- VBCompiler.ExtensionMethod1Argument
() => lst.DummyExtensionMethod1Argument(1)
---- VBCompiler.ExtensionMethod1ArgumentWithoutConversion
() => lst.DummyExtensionMethod1Argument(1)
---- VBCompiler.ExtensionMethod2Arguments
() => lst.DummyExtensionMethod2Arguments(5, 17)
---- VBCompiler.ExtensionMethod2ArgumentsWithoutConversion
() => lst.DummyExtensionMethod2Arguments(5, 6)
---- FactoryMethods.ExtensionMethod1Argument
lstString.DummyExtensionMethod1Arguments(1)
---- FactoryMethods.ExtensionMethod2Arguments
lstString.DummyExtensionMethod2Arguments(5, 17)
---- VBCompiler.ExtensionMethod0Arguments
() => lst.Count
---- VBCompiler.ExtensionMethod0ArgumentsWithoutConversion
() => lst.Count()
---- FactoryMethods.MakeExtensionExpression
--
-- Not implemented - NodeType: Exension not implemented.
--
---- FactoryMethods.ConstructUnbox
(int)obj
---- CSCompiler.RequiredGenericParameters
() => Dummy.DummyMethodWithGenerics<string>()
------